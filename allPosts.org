#+HUGO_BASE_DIR: ./

- How to publish
1. Save to export as markdown
2. Commit to publish

* Setup

We'll go with ox-hugo and use the instructions suggested by this kind individual: [[http://petercheng.net/posts/website-v2-setup/][Publishing a Website from Emacs and Hugo · Peter Cheng]]

I've created a new directory for my files here [[file+emacs:~/Sync/org/blog/programmer]]

~Hugo~ is installed.

Package ~ox-hugo~ is installed.

I like the look of the ~hugo-coder~ theme, and I've added it to ~themes~. The
full set of parameters (for ~config.toml~) are in [[https://github.com/luizdepra/hugo-coder/wiki/Configurations#complete-example][Configurations · luizdepra/hugo-coder Wiki · GitHub]].

#+BEGIN_SRC shell
cd ~/Sync/org/blog
hugo new site programmer
cd programmer && git clone https://github.com/luizdepra/hugo-coder.git themes/hugo-coder
#+END_SRC

Let's look at the .toml file, which contains important settings.

#+BEGIN_SRC shell :results output
cat ~/Sync/org/blog/programmer/config.toml
#+END_SRC

#+RESULTS:
#+begin_example
baseURL = "http://example.org/"
languageCode = "en-gb"
title = "Ian Hocking"

theme = "programmer"

[params]
    author = "Ian Hocking"
    authorimage = "http://ianhocking.com/wordpress/wp-content/IMG_8348-682x1024.jpg"
    description = "Chips with Everything"
    highlightjs = true
    highlightjsstyle = "zenburn"
    highlightjslanguages = ["lisp"]
[params.social]
    github = "OolonColoophid"
    linkedin = "ianhocking"

[[menu.main]]
    name = "Posts"
    weight = 100
    identifier = "posts"
    url = "/posts/"
[[menu.main]]
    name = "About"
    identifier = "about"
    weight = 200
    url = "/about/"
#+end_example

The site should export automatically on save, thanks to the file
~.dir-locals.el~, which sets ~org-hugo-auto-export-mode~.

When updating, we can have the Hugo server take us directly to the page that has
changed like so:

#+BEGIN_SRC shell
hugo server -D --navigateToChanged
#+END_SRC

* Todos
** DONE Add URL to my old blog in About
** DONE 404 is currently my Wordpress 404
- Is my symbolic link to the new 404 working yet?
** DONE Update About
** DONE Write a Post

* Hidden
:PROPERTIES:
:EXPORT_HUGO_SECTION: hidden
:END:

This section won't appear explicitly on my website, but I'd like it to be
here so I can check out how my 'style guide' looks on the web.

This page exists in a Hugo Section (e.g. pages, posts) called 'Hidden'.
Access it from: [[https://ianhocking.com/prog/hidden/style/]]

** Style Guide
:PROPERTIES:
:EXPORT_FILE_NAME: style
:EXPORT_DATE: 2019-08-01
:END:

Let's read about how to write posts in Ox-Hugo--after the jump. (This will
probably only work in the RSS.)

#+hugo: more

Don't want to export a post? Use the /noexport/ tag. Otherwise, a TODO heading
marks it as a draft. Mod.

*** Formatting
Some formatting tips:

#+CAPTION: Org and Markdown
|--------------------+--------------------------------------------------------------------+-----------------------|
| Org                | Markdown                                                           | In Hugo rendered HTML |
|--------------------+--------------------------------------------------------------------+-----------------------|
| =*bold*=           | =**bold**=                                                         | *bold*                |
| =/italics/=        | =_italics_=                                                        | /italics/             |
| ==monospace==      | =`monospace`=                                                      | =monospace=           |
| =~key-binding~=    | =`key-binding`=                                                    | ~key-binding~         |
|                    | - if =org-hugo-use-code-for-kbd= is nil [default]                  |                       |
| =~key-binding~=    | =<kbd>key-binding</kbd>=                                           |                       |
|                    | - if =org-hugo-use-code-for-kbd= is non-nil                        |                       |
|                    | - Requires *CSS* to render the =<kbd>= tag as something special.   |                       |
| =+strike-through+= | =~~strike-through~~=                                               | +strike-through+      |
| =_underline_=      | =<span class = "underline">underline</span>=                       | _underline_           |
|                    | - Requires *CSS* to render this =underline= class as an underline. |                       |
|--------------------+--------------------------------------------------------------------+-----------------------|

So, for everything that might appear on a computer screen:

*** Exporting

To export an org block:

: * Local variables :noexport:
: # local variables:
: # +org-export-directory: "projects/"
: # end:

*** Images :error:

[[/images/foo.png]]

*** Source Code

**** Inline


src_sh[:exports both :results output]{echo -e "test"}

**** Blocks

#+begin_src bash
#!/usr/bin/sh
ls ~/Dropbox
#+end_src


#+begin_src emacs-lisp

  ;; Smarter C-a/C-e for both Emacs and Evil. C-a will jump to indentation.
  ;; Pressing it again will send you to the true bol. Same goes for C-e, except
  ;; it will ignore comments+trailing whitespace before jumping to eol.
  (map! :gi "C-a" #'doom/backward-to-bol-or-indent
        :gi "C-e" #'doom/forward-to-last-non-comment-or-eol
        ;; Standardizes the behavior of modified RET to match the behavior of
        ;; other editors, particularly Atom, textedit, textmate, and vscode, in
        ;; which ctrl+RET will add a new "item" below the current one and
        ;; cmd+RET (Mac) / meta+RET (elsewhere) will add a new, blank line below
        ;; the current one.
        :gni [C-return]    #'+default/newline-below
        :gni [C-S-return]  #'+default/newline-above
        (:when IS-MAC
          :gni [s-return]    #'+default/newline-below
          :gni [S-s-return]  #'+default/newline-above)
        (:unless IS-MAC
          :gni [M-return]    #'+default/newline-below
          :gni [M-S-return]  #'+default/newline-above))
#+end_src
*** Equations - not working at the moment, probably my fault

If $a^2=b$ and \( b=2 \), then the solution must be either
$$a=+\sqrt{2}$$ or \[ a=-\sqrt{2} \]

\begin{equation}
\label{eq:1}
C = W\log_{2} (1+\mathrm{SNR})
\end{equation}

\begin{equation} \label{eq:2} C = Wlog2 (1+\mathrm{SNR}) \end{equation}

#+begin_equation
(x +1)/2
#+end_equation
*** Details disclosure

#+begin_details
#+begin_summary
Click here to find out more
#+end_summary
Now you know!
#+end_details

* Pages
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: pages
  :END:
** About
:PROPERTIES:
:EXPORT_FILE_NAME: about
:EXPORT_DATE: 2019-08-01
:END:
Hi, I'm Ian.

I live in Canterbury with my wife and several gerbils.

Following a successful career in academic psychology researching psycholinguistics
and creativity[fn:psychol], I'm now looking for opportunities
and challenges in my first love, software development. I enrolled on the University
of Kent's [[https://www.kent.ac.uk/courses/postgraduate/243/computer-science][MSc in Computer Science]] in September 2019 and aim to graduate in
September[fn:modules].

Are you on the lookout for a CS graduate who comes with fully developed
research skills, several years' successful leadership experience, and is
passionate about coding? Check out my [[https://www.dropbox.com/s/tkzth8mv5ihwhu6/cv.pdf?dl=1][CV]]/[[https://www.dropbox.com/s/pa7ymvusgifhvt2/Resources%20and%20Parsing%20thesis%20Hocking.pdf?dl=1][PhD]] and, if you like, have your people talk to [[mailto:ihocking@gmail.com][my people]].

Are you looking for my old blog This Writing Life? [[http://ianhocking.com/2012/06/19/★-the-cabinet-of-curiosities/][It lives!]] But is seldom updated.

Take care!

[fn:modules] Covering computer architecture, Java and OOP, web and information
systems (PHP, Javascript, SQL), logic programming, software engineering, and
machine learning.

[fn:psychol] [[https://scholar.google.co.uk/citations?user=901ZnqMAAAAJ&hl=en][Google Scholar profile]]

** Meta
:PROPERTIES:
:EXPORT_FILE_NAME: meta
:EXPORT_DATE: 2019-09-14
:END:

[[http://ianhocking.com/wordpress/wp-admin/index.php][Login: This Writing Life]]

* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: posts
:END:
** Hello world
:PROPERTIES:
:EXPORT_FILE_NAME: hello
:EXPORT_DATE: 2019-09-01
:END:

Hello! Please consider this blog to be in maintenance mode.
** Permanently Set File-Local Variables in Doom Emacs :emacs:doom:elisp:
:PROPERTIES:
:EXPORT_FILE_NAME: local_variables_doom
:EXPORT_DATE: 2019-09-09
:END:

From time to time, it's useful to set local variables within an ~org~
file. For instance, I have a file whose subsections I'd like to
encrypt. This being the case, I need to turn off autosave (since this could save
plain text). To do this for the buffer, I add this to the top:

#+BEGIN_SRC org :tangle no
# -*- buffer-auto-save-file-name: nil; -*-
#+END_SRC

Emacs is understandably wary of running elisp simply because it exists in the
file, however. Upon opening this buffer, it warns:

#+BEGIN_QUOTE
The local variables list in [filename] contains variables that are
risky
#+END_QUOTE

This is followed by a question about allowing them on this occasion only.
Globally, the level of wariness is controlled by the variable
~enable-local-variables~, whose explanation is given here: [[https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Local-Variables.html#File-Local-Variables][File Local
Variables - GNU Emacs Lisp Reference Manual]].

I would, however, like to avoid setting this globally. I'd prefer that Emacs
adds safe
variables to a whitelist. I'd consider turning off autosave to be reasonably
safe, so the first thing I tried was adding it to the whitelist. The safe variable is called
~safe-local-variable-values~ and is defined in the Emacs installation itself (i.e.
in ~/usr/local~, where my Emacs installation lives).

Because I use [[https://github.com/hlissner/doom-emacs][Doom Emacs]], I put the following into my ~./config/Doom/config.el~ (which is actually tangled
from my ~config.org~):

#+BEGIN_SRC emacs-lisp
  (add-to-list 'safe-local-variable-values '("buffer-auto-save-filename" . "nil") t)
#+END_SRC

But this didn't work. At first, I thought that perhaps the above elisp is running too
early, as the list when I inspected it after opening Emacs showed only the
original values (referring to variables relevant to other files). How late, I
wondered, could I make this code run? After the ~org~ module is loaded?[fn:org]

[fn:org] The ~after! org~ is a Doom wrapper function that ensures the elisp
codes that follows is evaluated after a given module is loaded.


#+BEGIN_SRC emacs-lisp
(after! org
  (add-to-list 'safe-local-variable-values '("buffer-auto-save-filename" . "nil") t)
  )
#+END_SRC

Still no luck.

It turns out that ~safe-local-variables~ was being set in
~/.config/Doom/init.el~--this should have been before my ~config.el~, and yet my
~config.el~ code was not modifying the variable.

Fine, I thought--I'll carefully edit the part of the ~init.el~ setting
~safe-local-variables~. But I still saw the same behaviour in my target file: I
was being asked, temporarily, if I wanted to permit the variable
~buffer-auto-save-file-name~ to be set. Why wouldn't my method work? I wasn't
sure. But since Doom had set the variables successfully before from other ~org~
files previousl, writing them to ~safe-local-variables~ in its own ~init.el~, I
had a look at how those files set variables and I saw that it was done in a
slightly different manner:

: * Local variables :noexport:
: # local variables:
: # +org-export-directory: "projects/"
: # end:

I tried this with my problematic file. First schoolboy error: I didn't place
it at the end of the file. This fixed, I tried again. But Emacs persisted in
prompting me to only allow setting ~buffer-auto-save-filename~ temporarily. Why not permanently?

I went back and looked again at the elisp in my ~/.config/Doom/init.el~ and
realised that I had put ~NIL~ in quotes. Second schoolboy error. Of course, it
shouldn't have quotes---it needs to be plain old ~NIL~. The correct code in the
~.init~ is thus:

#+BEGIN_SRC elisp :tangle no
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("427fa665823299f8258d8e27c80a1481edbb8f5463a6fb2665261e9076626710" "e838d6375a73fda607820c65eb3ea1f9336be7bd9a5528c9161e10c4aa663b5b" "80365dd15f97396bdc38490390c23337063c8965c4556b8f50937e63b5e9a65c" "fe666e5ac37c2dfcf80074e88b9252c71a22b6f5d2f566df9a7aa4f9bea55ef8" default)))
 '(safe-local-variable-values
   (quote
    ((+org-export-directory . "projects/")
     (+org-export-directory . "projects/cccuWorkloadModel")
     (+org-export-dir . "projects/cccuWorkloadModel")
     (buffer-auto-save-file-name . nil)))))
#+END_SRC



** TODO Blogging with Emacs, Hugo and Org Mode                       :setup:
:PROPERTIES:
:EXPORT_FILE_NAME: settingUpBlog
:EXPORT_DATE: 2019-09-01
:END:

This blog is brand--not to say spanking--new. For a while, this summer, I was in
the process of transitioning out of my current role (a story another time), I
was thinking about updating my web presence. Not that I don't have one. I've
been on the [[https://twitter.com/ian_hocking?lang=en-gb][the Twitter]] and Facebook for a long old time, and my blog dates back
to [[http://ianhocking.com/2003/02/heres-email-from-my-dad-that-i-just.html][2003]]. But my online identity focused mainly my fiction writing. I want to change its
focus to coding, which, I hope, is the direction in which I'm now
heading.

Like James May in [[https://www.youtube.com/watch?v=77BG4qkviWc][the Reassembler]], I want to slowly take this blog apart and put
it back together again.

My first tool is [[https://www.gnu.org/software/emacs/][Emacs]][fn:emacs], free software dating from the 1970s. I came to
Emacs from [[https://www.vim.org][Vim]]. I've written elsewhere about my preference for text-based (i.e.
non-GUI) tools, and I have an idea for a post to this blog where I talk about my
current Emacs setup.

Next is a static website generation framework called [[https://gohugo.io][Hugo]]. A key aim of the Hugo
project is that sites are pre-compiled. The server need only offer HTML, and
very little in-the-moment calculation happens on the server or the browser. This
means small, fast websites. Hugo has an active theming community, too. It never
ceases to amaze me that folks around the world are willing to offer their time
to such projects--not just the themes, of course, but the Hugo project itself.

Last, I'll be leaning heavily on [[https://orgmode.org][org-mode]], a part of Emacs that started as a
fancy outlining framework but became a wonderful system for storing, organising
and exporting information. Contributors have created adjuncts to org-mode, and
one such is ox-hugo[fn:oxhugo]

*** Org Mode Blogging Solutions







[fn:emacs] GNU Emacs 26.2, running on macOS 10.14.6.


[fn:oxhugo] I believe the ~ox~ part stands for org export.


*** Emacs

- Auto export

*** Org Mode

- Literate coding

*** Static Speed

*** Installation


*** My Old Blog

- It's still there
  - .htaccess issues

*** Tags

- Probably don't need them
** Using Git Hooks to Automate Blog Publishing                         :git:
:PROPERTIES:
:EXPORT_FILE_NAME: gitHooks
:EXPORT_DATE: 2019-09-10
:END:
*** Background
This blog is produced from a plaintext [[https://orgmode.org/][Org mode]] file
that is passed to an ~org~ module called
[[https://ox-hugo.scripter.co/][ox-hugo]]. Essentially, ~ox-hugo~ looks at the
~org~ file and produces
[[https://daringfireball.net/projects/markdown/][Markdown]] files, which are then
processed by a static website generation framework called
[[https://gohugo.io/getting-started/][Hugo]]. It goes without saying that these
are all fantastic, free tools.

*** My Prior Workflow

Originally, when ready to publish the blog, I would save the ~org~ file[fn:write]--this would trigger
an export process[fn:ox-auto] that produced the Markdown files. This would result in a
Hugo-friendly set of files that Hugo could then chew through to produce a
complete static website. I put together this workflow based largely on this
great post from Peter Cheng,
[[http://petercheng.net/posts/website-v2-setup/][Publishing a Website from Emacs
and Hugo]].

The Bash script to render and upload the site looks like this:

#+NAME: deploy.sh
#+CAPTION: Contents of the file ~deploy.sh~
#+BEGIN_SRC bash
#!/usr/bin/env bash

# Sync /public (containing finalised HTML and resources)
# to webserver (e.g. ianhocking.com)

# e - exit if command exits with error
# u - treat unset variables as an error
set -eu

username="username"
server="servername"

blogDir="/Users/ianuser/Sync/org/blog/programmer"

# Remove previous build of site
rm -r "$blogDir/public" || echo "No /public directory in blog directory $blogDir to delete"

# Build
cd $blogDir && hugo || echo "Cannot cd to blog directory $blogDir"

# Upload
rsync -r --verbose --compress --human-readable --progress --recursive public/. $username@$server:public_html/blog/
#+END_SRC


*** Why the Change?

Until yesterday, the [[https://git-scm.com/][Git]][fn:git] repository containing
the source of my site was private, but I decided that I wanted to put into the
~ox-hugo~ [[https://ox-hugo.scripter.co/doc/examples/][showcase]], so now it's
available on Github [[https://github.com/OolonColoophid/blog][here]].

*** Git Hooks

Git allows ~hooks~, which are simply scripts run by Git[fn:gitH]. You can find a
fuller explanation of them in various places.
[[https://hackernoon.com/automate-your-workflow-with-git-hooks-fef5d9b2a58c][Automate
Your Workflow with Git Hooks]] is a good one.

Essentially, with the directory holding your tracked files, you'll see
~.git/hooks~. Inside that, there are the hooks themselves.

Let's take a look at them.

#+BEGIN_SRC bash :exports output :results output
ls -g ~/Sync/org/blog/programmer/.git/hooks
#+END_SRC

Gives us:

#+RESULTS:
#+begin_example
applypatch-msg.sample
commit-msg.sample
copy_of_post-update
fsmonitor-watchman.sample
post-commit
post-update
pre-applypatch.sample
pre-commit.sample
pre-push
pre-push.sample
pre-rebase.sample
pre-receive.sample
prepare-commit-msg.sample
resources
update.sample
#+end_example

Some of these hooks are designed to be run by Git on a server (i.e.
receiving updates) and others locally (i.e. when sending). The details of which
hook suits which end of the process are provided by [[https://git-scm.com/docs/githooks][Git - githooks Documentation]].

The two hooks I'm interested in are ~post-commit~ and ~pre-push~. In the
directory listing above, you can see that both of these have the suffix
~.sample~ removed; that means that Git will pay attention to them. Additionally,
to make sure that the hooks execute (which are simple Bash scripts after all), we need to
make sure that execution privileges have been assigned:

#+BEGIN_SRC bash
chmod +x ls ~/Sync/org/blog/programmer/.git/hooks/post-commit
chmod +x ls ~/Sync/org/blog/programmer/.git/hooks/pre-push
#+END_SRC

*** My New Workflow

When I commit a change to the repository, I'd like ~git commit~ to run the hook
[[gitPost][post-commit]]. This hook will itself call ~git push~, which will notice the
[[gitPre][pre-push]] hook and then run [[deploy.sh][my deployment script]].

It's vitally important that the deployment script itself doesn't make changes to
the working tree, or we'll end up in a situation where Git branches diverge--a
difficult error to troubleshoot. For this reason, my ~.gitignore~ excludes:
~content/~, ~public~ and ~logs~.


#+NAME: gitPost
#+CAPTION: .git/hooks/post-commit
#+BEGIN_SRC sh
#!/bin/sh

{ echo '-- ' &&
	date &&
	echo 'Git hook .git/hooks/post-commit executed by git-commit' &&
	echo 'Hook will push master branch to remote origin' ; } >> /Users/ianuser/Sync/org/blog/programmer/logs/hooks.log

git push origin master

#+END_SRC

#+NAME: gitPre
#+CAPTION: .git/hooks/pre-push
#+BEGIN_SRC sh
#!/bin/sh

{ echo '-- ' &&
	date &&
	echo 'Git hook .git/hooks/pre-push executed by git-push' &&
	echo 'Hook will call deploy.sh' ; } >> /Users/ianuser/Sync/org/blog/programmer/logs/hooks.log

/Users/ianuser/Sync/org/blog/programmer/deploy.sh
#+END_SRC

Finally, I'm now able
to make a commit--this will get pushed to my [[https://github.com/OolonColoophid][Github repository]], the site built,
an the site uploaded to [[http://ianhocking.com][ianhocking.com]].


[fn:git] Git is a system for tracking file changes.

[fn:write] Or 'write the buffer to disk' in Emacs-speak.

[fn:gitH] Actually, any number of subcommands.

[fn:ox-auto] This is set with the variable ~org-hugo-auto-export-mode~ in
a dotfile in the blog directory (~.dirs-locals.el~).


** TODO Https and Http with Hugo :https:
:PROPERTIES:
:EXPORT_FILE_NAME: httpHttpsHugo
:EXPORT_DATE: 2019-09-10
:END:
** Merge Sort and Recursion                                             :Java:
:PROPERTIES:
:EXPORT_FILE_NAME: mergeSort
:EXPORT_DATE: 2019-12-31
:END:

One of the trickiest concepts of my [[https://www.cs.kent.ac.uk/masters/courses/msc-compsci/][MSc in Computer Science]] is recursion, which
is defined as the act of [[https://en.wikipedia.org/wiki/Recursion]['calling oneself']]. In the context of computer functions, calling
oneself is useful because it means doing whatever the function just did, but
again, on something it has produced. Tricky to get your head around; even
writing that last sentence was difficult!

As part of the learning process, I've been trying to clarify why I find
recursion hard. The answer seems to be that I want to follow the journey of
the recursion in a linear fashion; in other words, what is the program's state after the first
self call? What is it after the second? This soon becomes overwhelming
because there are too many elements in play. Whenever such confusion has
happened to me in the
past, the solution has lain in a better representation system. In other words, when
Roman numerals are making maths tricky, time to switch to Arabic.

There are many helpful ways of thinking about recursion out there. For instance, I found [[https://medium.com/@daniel.oliver.king/getting-started-with-recursion-f89f57c5b60e][this article]], which
contains the following insight:

#+begin_quote
When talking about writing recursive functions, most people focus on the fact that any recursive function needs to have two parts:
- A base case, in which the function can return the result immediately
- A recursive case, in which the function must call itself to break the current problem down to a simpler level
#+end_quote

This is great advice. It goes beyond thinking about recursion linearly, which
I've been trying to do, to thinking more about the algorithmic
perspective---what is this function actually trying to do? Well, it is trying to split
the problem into smaller pieces (recursive case), and when the pieces can't be made
any smaller (base case), the recursions reverse their sequence.

I wanted, however, to write a recursive program that tells me a bit about its
recursive journey, and for that I implemented the ~merge sort~ algorithm[fn:vneuman]. This was a
'three birds with one stone' situation. It not only helped my thinking about
recursion, but also about the algorithm itself, as well as giving me more
experience with Java.

I've put the full code (it's not long) on [[https://github.com/OolonColoophid/mergeSort][GitHub]], but you can see an example of the output
below. This uses the list of numbers from the [[https://en.wikipedia.org/wiki/Merge_sort][Wikipedia article on merge sort]]:
38, 27, 43, 3, 9, 82, 10 (shown in [[https://en.wikipedia.org/wiki/Merge_sort#/media/File:Merge_sort_algorithm_diagram.svg][this diagram]]).

The algorithm itself splits (function ~mergeSort~) the list into sublists until the lists are only of
one element each. Then, it merges (function ~merge~) the sublists into sorted
units of successively longer lengths until the original length is reached---and
thus we have 3, 9, 10, 27, 38, 43, 82.

Here's the output of the program (put the Wikipedia diagram alongside while you read):

#+begin_example
- FUNC mergeSort starting
  ...with array [38, 27, 43, 3, 9, 82, 10]
  Recursion INTO FUNC mergeSort for left half
- FUNC mergeSort starting
  ...with array [38, 27, 43, 3]
  Recursion INTO FUNC mergeSort for left half
- FUNC mergeSort starting
  ...with array [38, 27]
  Recursion INTO FUNC mergeSort for left half
- FUNC mergeSort starting
  ...with array [38]
  Base condition (array indivisible)
  Recursion OUT of FUNC mergeSort following base condition
  Recursion INTO FUNC mergeSort right half
- FUNC mergeSort starting
  ...with array [27]
  Base condition (array indivisible)
  Recursion OUT of FUNC mergeSort following base condition
  Base condition met for left and right halves!
- FUNC merge starting
  - 38 > 27 so add 27 to master array and move right pointer
  Making array: [27, 38], now stored master array

  Recursion INTO FUNC mergeSort right half
- FUNC mergeSort starting
  ...with array [43, 3]
  Recursion INTO FUNC mergeSort for left half
- FUNC mergeSort starting
  ...with array [43]
  Base condition (array indivisible)
  Recursion OUT of FUNC mergeSort following base condition
  Recursion INTO FUNC mergeSort right half
- FUNC mergeSort starting
  ...with array [3]
  Base condition (array indivisible)
  Recursion OUT of FUNC mergeSort following base condition
  Base condition met for left and right halves!
- FUNC merge starting
  - 43 > 3 so add 3 to master array and move right pointer
  Making array: [3, 43], now stored master array

  Base condition met for left and right halves!
- FUNC merge starting
  - 27 > 3 so add 3 to master array and move right pointer
  - 27 <= 43 so add 27 to master array and move left pointer
  - 38 <= 43 so add 38 to master array and move left pointer
  Making array: [3, 27, 38, 43], now stored master array

  Recursion INTO FUNC mergeSort right half
- FUNC mergeSort starting
  ...with array [9, 82, 10]
  Recursion INTO FUNC mergeSort for left half
- FUNC mergeSort starting
  ...with array [9, 82]
  Recursion INTO FUNC mergeSort for left half
- FUNC mergeSort starting
  ...with array [9]
  Base condition (array indivisible)
  Recursion OUT of FUNC mergeSort following base condition
  Recursion INTO FUNC mergeSort right half
- FUNC mergeSort starting
  ...with array [82]
  Base condition (array indivisible)
  Recursion OUT of FUNC mergeSort following base condition
  Base condition met for left and right halves!
- FUNC merge starting
  - 9 <= 82 so add 9 to master array and move left pointer
  Making array: [9, 82], now stored master array

  Recursion INTO FUNC mergeSort right half
- FUNC mergeSort starting
  ...with array [10]
  Base condition (array indivisible)
  Recursion OUT of FUNC mergeSort following base condition
  Base condition met for left and right halves!
- FUNC merge starting
  - 9 <= 10 so add 9 to master array and move left pointer
  - 82 > 10 so add 10 to master array and move right pointer
  Making array: [9, 10, 82], now stored master array

  Base condition met for left and right halves!
- FUNC merge starting
  - 3 <= 9 so add 3 to master array and move left pointer
  - 27 > 9 so add 9 to master array and move right pointer
  - 27 > 10 so add 10 to master array and move right pointer
  - 27 <= 82 so add 27 to master array and move left pointer
  - 38 <= 82 so add 38 to master array and move left pointer
  - 43 <= 82 so add 43 to master array and move left pointer
  Making array: [3, 9, 10, 27, 38, 43, 82], now stored master array

---
Sorted result:[3, 9, 10, 27, 38, 43, 82]

#+end_example

So putting some comments in the output of merge sort really helped me to
understand the relationship between the algorithm and the recursive code, and I
hope it might help you.

[fn:vneuman] Footnotes are recursive! This is just a note to remind you that the
merge sort algorithm is a very efficient way of sorting a list of numbers by
magnitude, since the time taken to sort has more to do with the number of
recursion levels than the linear elements in the list (at least, that's my impression). It was partly created by [[https://en.wikipedia.org/wiki/John_von_Neumann][John von Neumann]], and I read much about him
and the digital revolution in a book called [[https://www.amazon.co.uk/Turings-Cathedral-Origins-Digital-Universe/dp/014101590X][Turing's Cathedral]].


** Solving Sudoku Puzzles with Prolog
:PROPERTIES:
:EXPORT_FILE_NAME: prologCLP
:EXPORT_DATE: 2020-05-21
:END:

[[https://en.wikipedia.org/wiki/Prolog][Prolog]] has been a mind-expanding discovery. It is, at once, the most frustrating
computer language I've ever used, and the most elegant and expressive. It
works by taking a question about a notional world and trying to make it true. Any
variables that are needed to achieve this truth can then feed into other
questions. Sound weird? It is!

Because Prolog is non-imperative, it can make those of us used to imperative
programming bang our heads on the desk a few times; but it turns out there are
advantages to describing your problem well and letting the computer figure out
the program to solve it. As long as the description works, the program should work, and one
thing's for sure: the description is a lot shorter and clearer.

Towards the end of my logic programming module at the University of Kent, we
were introduced to constraint-based programming. In a nutshell, this works by
describing a domain (e.g. a map of the world's countries), variables
(e.g. the countries), and values those variables can take (e.g. colours). We can
then give a constraint: 'I would like each country on the map to have a colour,
but neighbouring countries must not have the same colour'. Prolog--with some
help from a finite domain constraint programming library, [[https://www.swi-prolog.org/man/clpfd.html][CLP(FD)]]--will then pootle off
and provide you with all of the ways in which this constraint can be fulfilled.
In this case, it would be the number of maps that exist where neighbouring
countries have different colours, together with the colours themselves.

Now, I love a good [[https://en.wikipedia.org/wiki/Sudoku][Sudoku]]. As Wikipedia
tell us, the objective of Sudoku is:

#+BEGIN_QUOTE
...is to fill a 9×9 grid with digits so that each column, each row, and each of the nine 3×3 subgrids that compose the grid (also called "boxes", "blocks", or "regions") contain all of the digits from 1 to 9. The puzzle setter provides a partially completed grid, which for a well-posed puzzle has a single solution.
#+END_QUOTE

A perfect way to exercise my Prolog skills to implement the constraints! It took
me a couple of hours and works successfully--in an imperative language like Python, this would have been a lot longer,
and probably involving a few bugs. Plus, it works
with
the [[https://www.conceptispuzzles.com/index.aspx?uri=info/article/424][world's
hardest sudoku]]!

The code is over at [[https://github.com/OolonColoophid/prolog\_sudoku/blob/master/readme.org][Github]].

Finally, in my Prolog journey, I came across some great learning resources
beyond those offered by Stefan and Andy at UKC. [[https://learnxinyminutes.com/docs/prolog/][Learn prolog in Y
Minutes]] takes a fairly 'quick and dirty' approach, but will get you to speed.
[[http://lpn.swi-prolog.org/lpnpage.php?pagetype=html&pageid=lpn-htmlli4][Learn Prolog Now!]] is more in depth.

** TODO The Crack of Doom                                            :setup:
:PROPERTIES:
:EXPORT_FILE_NAME: doomSetup
:EXPORT_DATE: 2019-09-01
:END:

** Java Puzzles: Oddity                                               :Java:
:PROPERTIES:
:EXPORT_FILE_NAME: javaPuzzles1
:EXPORT_DATE: 2019-10-05
:END:

I'm not that far into my Java journey, but I've come across this interesting
Java puzzle, set by one of my MSc instructors. I'm setting it down here to help
me remember it. The puzzle isn't unique to our course, and I've seen it
discussed elsewhere (not that I searched until I'd given it a thorough
working over privately, first!).

Essentially, we are asked: "Is the method below to determine whether a number is
odd correct?"

#+NAME: isOdd
#+BEGIN_SRC java :classname "MyClass" :results output

public class MyClass {

    public static boolean isOdd(int i) {
        return i % 2 == 1;
    }

    public static void main(String[] args){

        System.out.println("1 is " + isOdd(1));
        System.out.println("2 is " + isOdd(2));    }
}

#+END_SRC

~isOdd~ is a predicate function, in that it should return ~true~ for odd numbers
and ~false~ for even numbers. The version you see above, [[isOdd][isOdd]], has some extra
wrapper Java around it--to make it work with Org Babel--, including the two print statements in the ~main~ method,
but is otherwise identical to the one set by our instructor.

Intuitively, it looks correct. It applies the function ~modulus 2~ (i.e. the
remainder when the parameter is divided by two). This should return ~0~ for even
numbers - what we want - and ~1~ for odd numbers - also what we want.

You can see my testing in the table below.

#+CAPTION: Testing isOdd
| Input | Modulus Result (% 2) | Function Should Output | Function Outputs |
|-------+----------------------+------------------------+------------------|
|     5 |                    1 | True                   | True             |
|     4 |                    0 | False                  | False            |
|    11 |                    1 | True                   | True             |
|   100 |                    0 | False                  | False            |
|    -5 |                    1 | True                   | False            |
|     0 |                    0 | False                  | False            |

Aha - it fails with negative numbers.

This made me double check how a modulus works with negative numbers. It turns out that, in
mathematics, the modulus of a negative is normally positive (i.e. without a
sign). However, some programming languages - including Java - keep
the sign. I can see this is helpful in retaining a something about the
calculation. Essentially, it allows us to recover that the one of the terms in
the modulus was negative.

And this negative number case is indeed the failure point for the method. To make ~isOdd~ work for
negatives, our conditional should test for a non-zero remainder such as ~-1~ in
the case of modulus ~5~. The corrected
source is below, along with my test numbers from the table above.

#+BEGIN_SRC java :classname "MyClass" :results output :exports both

public class MyClass {

    public static boolean isOdd(int i) {
        return i % 2 != 0;
    }

    public static void main(String[] args){

        System.out.println("Is 5 odd? " + isOdd(5));
        System.out.println("Is 4 odd? " + isOdd(4));
        System.out.println("Is 11 odd? " + isOdd(11));
        System.out.println("Is 100 odd? " + isOdd(100));
        System.out.println("Is -5 odd? " + isOdd(-5));
        System.out.println("Is 0 odd? " + isOdd(0));
    }
}

#+END_SRC

** TODO Java Puzzles: When is a plus not a plus?                      :Java:

"Provide type declarations so that this is legal:

1. x += i;

And this is not:

2. x = x + i;

Explain why this is so."

This sounds like there is a difference bewteen + and +=, which is not obvious.
(Both statements should add x to i.)

OK, Stack Overflow tells me that these are *not* equivalent.

| Operation | Type of x | Type of i | Compilation |
|-----------+-----------+-----------+-------------|
| x = x + i | int       | long      | FAIL        |
| x = x + i | int       | int       | Yes         |
|-----------+-----------+-----------+-------------|
| x += i    | int       | double    | Yes         |
| x += i    | int       | int       | Yes         |
| x += i    | double    | int       | Yes         |

Note that any assignment of a variable to a decimal is a double (it's more
accurate than float, and Java prefers it because it is less lossy). Override by
putting an f at the end of the number, e.g. 3.2f.

#+BEGIN_QUOTE
A compound assignment expression of the form E1 op= E2 is equivalent to E1 = (T)
((E1) op (E2)), where T is the type of E1, except that E1 is evaluated only
once.

This code block is correct:

short x = 3;
x += 4.6;

It results in 7 because the first expanded operand take the type short, and this
is applied to the second operand. It's the equivalent of this:

short x = 3;
x = (short)(x + 4.6);

-- https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.26.2
#+END_QUOTE


#+BEGIN_SRC java :classname MyClass :results output
public class MyClass{
    public static void main(String[] args) {
        double i = 1.7;
        int x = 2;

        System.out.println(x += i);
        System.out.println(x = x + i); // Uncomment and code will fail
    }
}
#+END_SRC

#+RESULTS:
: 3

So the short answer is that ~x += i~ can have incompatible types. So defining
~x~ as ~int~ and ~i~ as ~double~ means that ~i~ will be cast an as ~int~ and the
operation can proceed.

No casting happens with ~x = x + i;~ - there are incompatible types.

No solution suggested yet in Friday's lecture! Maybe after the weekend.
** TODO Java Puzzles: Letters and Numbers                             :Java:

"What does this print?"

#+BEGIN_SRC java :classname MyClass :results output
public class MyClass{
    public static void main(String[] args) {
        String letters = "ABC";
        char[] numbers = {'1','2','3'};
        System.out.println(letters + " as easy as " + numbers);
    }
}
#+END_SRC

"Why?"

"Fix it."

#+RESULTS:
: ABC as easy as [C@7a81197d

According to [[https://stackoverflow.com/questions/409784/whats-the-simplest-way-to-print-a-java-array][What's the simplest way to print a Java array? - Stack Overflow]],
when you try to print an array you get the className + '@' + the hex of the
hashCode of the array, as defined by Object.toString(). Printing a string
directly seems to override this method and give the user 'what they mean'.

The solution is to use the method ~toString(arr)~ in the class ~Arrays~ - but I
don't seem to have access to that class. Do I need to load a library? Perhaps
~import java.util.Arrays;~ will work.


** Some .httaccess Settings to Separate my Blogs
:PROPERTIES:
:EXPORT_FILE_NAME: where-do-people-go
:END:

Until recently, if a visitor went to [[https://ianhocking.com]], they'd be redirected to my
WordPress blog of several years called [[https://ianhocking.com/twl/][This Writing Life]]. I now want to
move this to one side this so I can give prominence to my [[https://ianhocking.com][new programmer blog]].
However, I'd been having trouble keeping the two blogs separate.

If a person went to https://ianhocking.com, they'd see my
programmer blog. But if they requested a page that did not exist, they'd always
get directed to my
writing blog. Not only that, the writing blog's search was broken (as was any
post preview within WordPress dashboard itself, caused by the preview sending an 'empty' URL to my
domain, which would be redirected to my programming blog).

#+CAPTION: Desired behaviour
| URL                                                               | Type           | Behaviour                          |
|-------------------------------------------------------------------+----------------+------------------------------------|
| https://ianhocking.com                                            | exists         | Redirect to programmer blog        |
| https://ianhocking.com/something                                  | does not exist | Redirect to programmer blog        |
| https://ianhocking.com/2013/06/22/writing-a-novel-using-markdown/ | does exist     | Redirect to This Writing Life blog |

I had a frustrating time with .htaccess files---the desired behaviour of sending
this to either the programming blog or the writing blog depending on the URL
succeeded intermittently, basically because I was having trouble fully
understanding the rewrite rules that WordPress had applied to the
~.htaccess~[fn:htaccess] file. In a nutshell, WordPress alters this file for the
root folder (in my case, ianhocking.com) and then intercepts any URLs that don't
exist as files on the server. Because permalink URLs are often abritrary, and
don't directly map onto the server's directory structure, this is a good way of
dealing with permalinks.

[fn:htaccess] A file used by the Apache web server to decide how pages are
served in a given directory.


Here is the relevant portion of my .htaccess file, with
explanations of what each of these lines does based on a handy-dandy page over at
[[http://glennmessersmith.com/pages/wphtaccess.html][Glenn Messersmith's site]].

#+BEGIN_SRC .htaccess

# BEGIN WordPress
 <IfModule mod_rewrite.c>             # Is the server able to do URL rewrites?
                                      # Begin block
 RewriteEngine On                     # Start rewriting URLs
 RewriteBase /                        # Base URL relative to the WordPress files
 RewriteRule ^index\.php$ - [L]       # If requested file is index.php,
                                      # take user there and stop processing rules
 RewriteCond %{REQUEST_FILENAME} !-f  # Does the requested file not exist?
 RewriteCond %{REQUEST_FILENAME} !-d  # Or does the directory not exist?
 RewriteRule . /index.php [L]         # Otherwise replace request with index.php
                                      # and go there (WordPress will still know
                                      # the original request URL)
 </IfModule>                          # End block
# END WordPress

#+END_SRC

Elsewhere in the .htaccess file, I set the ~DirectoryIndex~ (i.e. the place
you're taken if only the directory is requested) to my new blog's 404 page:

#+BEGIN_SRC .httaccess
DirectoryIndex /prog/index.htm /prog/index.html prog/index.php
ErrorDocument 404 /prog/404.html
#+END_SRC

*** The Fix

My solution was to move the blog to a subdirectory, /twl/, so it's now accessed at
https://ianhocking.com/twl/. I updated the permalinks settings within WordPress
itself (Settings > General Settings > Site Address (URL):
https://ianhocking.com/twl), so that WordPress is aware that /twl/ should be
part of the permalink address.

This meant I could the tweak the .htaccess file (in both the site root and the
WordPress directory) with the effect that WordPress would only intercept
non-existent files or directories if they were prefixed by ~twl~. This allows me
to separate the blogs more senisbly.

#+BEGIN_SRC .httaccess
RewriteRule ^twl.* /index.php [L]
#+END_SRC

One last thing. I had worried that this would break all the incoming links to my writing
blog. However, it happens to be the case that these posts are date-based, and
thus always begin with a number. Another ~RewriteRule~ to detect these and throw to the
WordPress index.php page would fix it. So here is my final .htaccess file
(again, one version for the root of the domain and another for the WordPress
directory itself).

#+BEGIN_SRC .httaccess

# BEGIN WordPress
 <IfModule mod_rewrite.c>
 RewriteEngine On
 RewriteBase /
 RewriteRule ^index\.php$ - [L]
 RewriteCond %{REQUEST_FILENAME} !-f
 RewriteCond %{REQUEST_FILENAME} !-d
 RewriteRule ^twl.* /index.php
 RewriteRule ^[0-9].* /index.php [L]
 </IfModule>
# END WordPress

#+END_SRC
