#+HUGO_BASE_DIR: ./

- How to publish (more on this in the post all about my workflow, on the blog)
1. Save to export as markdown
  - Make sure the cursor is at a valid Hugo subtree point
  - Confirmation message will appear in the status bar
2. Commit the 'public' directory to publish
3. Push, which will also run a deployment script that uses ssh keys to push to GitHub and publish to ianhocking.com

* Setup

We'll go with ox-hugo and use the instructions suggested by this kind individual: [[http://petercheng.net/posts/website-v2-setup/][Publishing a Website from Emacs and Hugo · Peter Cheng]]

I've created a new directory for my files here [[file+emacs:~/Sync/org/blog/programmer]]

~Hugo~ is installed.

Package ~ox-hugo~ is installed.

I like the look of the ~hugo-coder~ theme, and I've added it to ~themes~. The
full set of parameters (for ~config.toml~) are in [[https://github.com/luizdepra/hugo-coder/wiki/Configurations#complete-example][Configurations · luizdepra/hugo-coder Wiki · GitHub]].

#+BEGIN_SRC shell
cd ~/Sync/org/blog
hugo new site programmer
cd programmer && git clone https://github.com/luizdepra/hugo-coder.git themes/hugo-coder
#+END_SRC

Let's look at the .toml file, which contains important settings.

#+BEGIN_SRC shell :results output
cat ~/Sync/org/blog/programmer/config.toml
#+END_SRC

#+RESULTS:
#+begin_example
baseURL = "http://example.org/"
languageCode = "en-gb"
title = "Ian Hocking"

theme = "programmer"

[params]
    author = "Ian Hocking"
    authorimage = "http://ianhocking.com/wordpress/wp-content/IMG_8348-682x1024.jpg"
    description = "Chips with Everything"
    highlightjs = true
    highlightjsstyle = "zenburn"
    highlightjslanguages = ["lisp"]
[params.social]
    github = "OolonColoophid"
    linkedin = "ianhocking"

[[menu.main]]
    name = "Posts"
    weight = 100
    identifier = "posts"
    url = "/posts/"
[[menu.main]]
    name = "About"
    identifier = "about"
    weight = 200
    url = "/about/"
#+end_example

The site should export automatically on save, thanks to the file
~.dir-locals.el~, which sets ~org-hugo-auto-export-mode~.

When updating, we can have the Hugo server take us directly to the page that has
changed like so:

#+BEGIN_SRC shell
hugo server -D --navigateToChanged
#+END_SRC

* Todos
** DONE Add URL to my old blog in About
** DONE 404 is currently my Wordpress 404
- Is my symbolic link to the new 404 working yet?
** DONE Update About
** DONE Write a Post

* Hidden
:PROPERTIES:
:EXPORT_HUGO_SECTION: hidden
:END:

This section won't appear explicitly on my website, but I'd like it to be
here so I can check out how my 'style guide' looks on the web.

This page exists in a Hugo Section (e.g. pages, posts) called 'Hidden'.
Access it from: [[https://ianhocking.com/prog/hidden/style/]]

** Style Guide
:PROPERTIES:
:EXPORT_FILE_NAME: style
:EXPORT_DATE: 2019-08-01
:END:

Let's read about how to write posts in Ox-Hugo--after the jump. (This will
probably only work in the RSS.)

#+hugo: more

Don't want to export a post? Use the /noexport/ tag. Otherwise, a TODO heading
marks it as a draft. Mod.

*** Formatting
Some formatting tips:

#+CAPTION: Org and Markdown
|--------------------+--------------------------------------------------------------------+-----------------------|
| Org                | Markdown                                                           | In Hugo rendered HTML |
|--------------------+--------------------------------------------------------------------+-----------------------|
| =*bold*=           | =**bold**=                                                         | *bold*                |
| =/italics/=        | =_italics_=                                                        | /italics/             |
| ==monospace==      | =`monospace`=                                                      | =monospace=           |
| =~key-binding~=    | =`key-binding`=                                                    | ~key-binding~         |
|                    | - if =org-hugo-use-code-for-kbd= is nil [default]                  |                       |
| =~key-binding~=    | =<kbd>key-binding</kbd>=                                           |                       |
|                    | - if =org-hugo-use-code-for-kbd= is non-nil                        |                       |
|                    | - Requires *CSS* to render the =<kbd>= tag as something special.   |                       |
| =+strike-through+= | =~~strike-through~~=                                               | +strike-through+      |
| =_underline_=      | =<span class = "underline">underline</span>=                       | _underline_           |
|                    | - Requires *CSS* to render this =underline= class as an underline. |                       |
|--------------------+--------------------------------------------------------------------+-----------------------|

So, for everything that might appear on a computer screen:

*** Exporting

To export an org block:

: * Local variables :noexport:
: # local variables:
: # +org-export-directory: "projects/"
: # end:

*** Images :error:

[[/images/foo.png]]

*** Source Code

**** Inline


src_sh[:exports both :results output]{echo -e "test"}

**** Blocks

#+begin_src bash
#!/usr/bin/sh
ls ~/Dropbox
#+end_src


#+begin_src emacs-lisp

  ;; Smarter C-a/C-e for both Emacs and Evil. C-a will jump to indentation.
  ;; Pressing it again will send you to the true bol. Same goes for C-e, except
  ;; it will ignore comments+trailing whitespace before jumping to eol.
  (map! :gi "C-a" #'doom/backward-to-bol-or-indent
        :gi "C-e" #'doom/forward-to-last-non-comment-or-eol
        ;; Standardizes the behavior of modified RET to match the behavior of
        ;; other editors, particularly Atom, textedit, textmate, and vscode, in
        ;; which ctrl+RET will add a new "item" below the current one and
        ;; cmd+RET (Mac) / meta+RET (elsewhere) will add a new, blank line below
        ;; the current one.
        :gni [C-return]    #'+default/newline-below
        :gni [C-S-return]  #'+default/newline-above
        (:when IS-MAC
          :gni [s-return]    #'+default/newline-below
          :gni [S-s-return]  #'+default/newline-above)
        (:unless IS-MAC
          :gni [M-return]    #'+default/newline-below
          :gni [M-S-return]  #'+default/newline-above))
#+end_src
*** Equations - not working at the moment, probably my fault

If $a^2=b$ and \( b=2 \), then the solution must be either
$$a=+\sqrt{2}$$ or \[ a=-\sqrt{2} \]

\begin{equation}
\label{eq:1}
C = W\log_{2} (1+\mathrm{SNR})
\end{equation}

\begin{equation} \label{eq:2} C = Wlog2 (1+\mathrm{SNR}) \end{equation}

#+begin_equation
(x +1)/2
#+end_equation
*** Details disclosure

#+begin_details
#+begin_summary
Click here to find out more
#+end_summary
Now you know!
#+end_details

* Pages
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: pages
  :END:
** About
:PROPERTIES:
:EXPORT_FILE_NAME: about
:EXPORT_DATE: 2019-08-01
:END:
Hi, I'm Ian.

I live in Canterbury with my wife and several gerbils.

Following a successful career in academic psychology researching psycholinguistics
and creativity[fn:psychol], I'm now enjoying opportunities
and challenges in my first love, software development. I enrolled on the University
of Kent's [[https://www.kent.ac.uk/courses/postgraduate/243/computer-science][MSc in Computer Science]][fn:modules] in September 2019 and graduated in
2021with distinction. I'm currently working as a software developer at [[https://www.literatureandlatte.com][Literature and Latte]].

Check out my [[https://www.dropbox.com/scl/fi/ai4w97dipqg90zpmksjjg/cv.pdf?rlkey=76eqxf8dl6b50telyybec28gl&dl=0][CV]]/[[https://www.dropbox.com/s/pa7ymvusgifhvt2/Resources%20and%20Parsing%20thesis%20Hocking.pdf?dl=1][PhD]].

Are you looking for my old blog This Writing Life? [[http://ianhocking.com/2012/06/19/★-the-cabinet-of-curiosities/][It lives!]] But is seldom updated.

Take care!

[fn:modules] Covering computer architecture, Java and OOP, web and information
systems (PHP, Javascript, SQL), logic programming, software engineering, and
machine learning.

[fn:psychol] [[https://scholar.google.co.uk/citations?user=901ZnqMAAAAJ&hl=en][Google Scholar profile]]

** Meta
:PROPERTIES:
:EXPORT_FILE_NAME: meta
:EXPORT_DATE: 2019-09-14
:END:

[[http://ianhocking.com/wordpress/wp-admin/index.php][Login: This Writing Life]]

** Baker Street
:PROPERTIES:
:EXPORT_FILE_NAME: bakerStreet
:EXPORT_DATE: 2020-08-19
:END:

Baker Street is a natural deduction tool for macOS written in Swift. It is open
source and you can [[https://github.com/OolonColoophid/bakerStreet][view the code on Github]].

*** Manual

[[https://ianhocking.com/manuals/BakerStreet_v1.0_manual.pdf][Download]].

*** Overview

Available for macOS (10.12 -), Baker Street is a free-form tool that helps you produce natural deduction proofs in propositional logic. Use Baker Street to enter your proof, check for errors, clarify relationships between proof lines, preview, and export your proof in several formats.

Type your proof in a free-form manner. Baker Street provides automatic line numbering and feedback to help you see where you've gone wrong.

Baker Street is great for creating new proofs, inspecting sample proofs, and exporting them to a variety of formats, all within a native macOS experience.

Baker Street was developed by Ian Hocking under the supervision of Dr Olaf Chitil at the School of Computing, University of Kent, UK, as an MSc Computer Science summer project.

*** Key Features

- Proof validation

- Syntax highlighting

- Tailored error messages designed to get you on track

- Add text comments to your proof

- One-touch insertion of logical operators and inference rule justifications

- Preview your formatted proof while typing in a lightweight markup language

- Export or copy your preview to LaTeX, Markdown or HTML

- Zoom support for all windows

- Dark mode support

- Example proofs for all inference rules (e.g. AND Introduction)

Further help on:

- Inference rules (in overview and in detail)

- Key term definitions (e.g. theorem)

*** Privacy Policy

This policy applies to all information collected by Baker Street.

**** Information we collect

No information is collected.

**** Your Consent

By using this app, you consent to our privacy policy.

**** Contact

If you have questions regarding this privacy policy, you may email [[mailto:ihocking@gmail.com][ihocking@gmail.com]].

* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: posts
:END:
** Hello world
:PROPERTIES:
:EXPORT_FILE_NAME: hello
:EXPORT_DATE: 2019-09-01
:END:

Hello! Please consider this blog to be in maintenance mode.
** Permanently Set File-Local Variables in Doom Emacs :emacs:doom:elisp:
:PROPERTIES:
:EXPORT_FILE_NAME: local_variables_doom
:EXPORT_DATE: 2019-09-09
:END:

From time to time, it's useful to set local variables within an ~org~
file. For instance, I have a file whose subsections I'd like to
encrypt. This being the case, I need to turn off autosave (since this could save
plain text). To do this for the buffer, I add this to the top:

#+BEGIN_SRC org :tangle no
# -*- buffer-auto-save-file-name: nil; -*-
#+END_SRC

Emacs is understandably wary of running elisp simply because it exists in the
file, however. Upon opening this buffer, it warns:

#+BEGIN_QUOTE
The local variables list in [filename] contains variables that are
risky
#+END_QUOTE

This is followed by a question about allowing them on this occasion only.
Globally, the level of wariness is controlled by the variable
~enable-local-variables~, whose explanation is given here: [[https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Local-Variables.html#File-Local-Variables][File Local
Variables - GNU Emacs Lisp Reference Manual]].

I would, however, like to avoid setting this globally. I'd prefer that Emacs
adds safe
variables to a whitelist. I'd consider turning off autosave to be reasonably
safe, so the first thing I tried was adding it to the whitelist. The safe variable is called
~safe-local-variable-values~ and is defined in the Emacs installation itself (i.e.
in ~/usr/local~, where my Emacs installation lives).

Because I use [[https://github.com/hlissner/doom-emacs][Doom Emacs]], I put the following into my ~./config/Doom/config.el~ (which is actually tangled
from my ~config.org~):

#+BEGIN_SRC emacs-lisp
  (add-to-list 'safe-local-variable-values '("buffer-auto-save-filename" . "nil") t)
#+END_SRC

But this didn't work. At first, I thought that perhaps the above elisp is running too
early, as the list when I inspected it after opening Emacs showed only the
original values (referring to variables relevant to other files). How late, I
wondered, could I make this code run? After the ~org~ module is loaded?[fn:org]

[fn:org] The ~after! org~ is a Doom wrapper function that ensures the elisp
codes that follows is evaluated after a given module is loaded.


#+BEGIN_SRC emacs-lisp
(after! org
  (add-to-list 'safe-local-variable-values '("buffer-auto-save-filename" . "nil") t)
  )
#+END_SRC

Still no luck.

It turns out that ~safe-local-variables~ was being set in
~/.config/Doom/init.el~--this should have been before my ~config.el~, and yet my
~config.el~ code was not modifying the variable.

Fine, I thought--I'll carefully edit the part of the ~init.el~ setting
~safe-local-variables~. But I still saw the same behaviour in my target file: I
was being asked, temporarily, if I wanted to permit the variable
~buffer-auto-save-file-name~ to be set. Why wouldn't my method work? I wasn't
sure. But since Doom had set the variables successfully before from other ~org~
files previousl, writing them to ~safe-local-variables~ in its own ~init.el~, I
had a look at how those files set variables and I saw that it was done in a
slightly different manner:

: * Local variables :noexport:
: # local variables:
: # +org-export-directory: "projects/"
: # end:

I tried this with my problematic file. First schoolboy error: I didn't place
it at the end of the file. This fixed, I tried again. But Emacs persisted in
prompting me to only allow setting ~buffer-auto-save-filename~ temporarily. Why not permanently?

I went back and looked again at the elisp in my ~/.config/Doom/init.el~ and
realised that I had put ~NIL~ in quotes. Second schoolboy error. Of course, it
shouldn't have quotes---it needs to be plain old ~NIL~. The correct code in the
~.init~ is thus:

#+BEGIN_SRC elisp :tangle no
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("427fa665823299f8258d8e27c80a1481edbb8f5463a6fb2665261e9076626710" "e838d6375a73fda607820c65eb3ea1f9336be7bd9a5528c9161e10c4aa663b5b" "80365dd15f97396bdc38490390c23337063c8965c4556b8f50937e63b5e9a65c" "fe666e5ac37c2dfcf80074e88b9252c71a22b6f5d2f566df9a7aa4f9bea55ef8" default)))
 '(safe-local-variable-values
   (quote
    ((+org-export-directory . "projects/")
     (+org-export-directory . "projects/cccuWorkloadModel")
     (+org-export-dir . "projects/cccuWorkloadModel")
     (buffer-auto-save-file-name . nil)))))
#+END_SRC



** TODO Blogging with Emacs, Hugo and Org Mode                       :setup:
:PROPERTIES:
:EXPORT_FILE_NAME: settingUpBlog
:EXPORT_DATE: 2019-09-01
:END:

This blog is brand--not to say spanking--new. For a while, this summer, I was in
the process of transitioning out of my current role (a story another time), I
was thinking about updating my web presence. Not that I don't have one. I've
been on the [[https://twitter.com/ian_hocking?lang=en-gb][the Twitter]] and Facebook for a long old time, and my blog dates back
to [[http://ianhocking.com/2003/02/heres-email-from-my-dad-that-i-just.html][2003]]. But my online identity focused mainly my fiction writing. I want to change its
focus to coding, which, I hope, is the direction in which I'm now
heading.

Like James May in [[https://www.youtube.com/watch?v=77BG4qkviWc][the Reassembler]], I want to slowly take this blog apart and put
it back together again.

My first tool is [[https://www.gnu.org/software/emacs/][Emacs]][fn:emacs], free software dating from the 1970s. I came to
Emacs from [[https://www.vim.org][Vim]]. I've written elsewhere about my preference for text-based (i.e.
non-GUI) tools, and I have an idea for a post to this blog where I talk about my
current Emacs setup.

Next is a static website generation framework called [[https://gohugo.io][Hugo]]. A key aim of the Hugo
project is that sites are pre-compiled. The server need only offer HTML, and
very little in-the-moment calculation happens on the server or the browser. This
means small, fast websites. Hugo has an active theming community, too. It never
ceases to amaze me that folks around the world are willing to offer their time
to such projects--not just the themes, of course, but the Hugo project itself.

Last, I'll be leaning heavily on [[https://orgmode.org][org-mode]], a part of Emacs that started as a
fancy outlining framework but became a wonderful system for storing, organising
and exporting information. Contributors have created adjuncts to org-mode, and
one such is ox-hugo[fn:oxhugo]

*** Org Mode Blogging Solutions







[fn:emacs] GNU Emacs 26.2, running on macOS 10.14.6.


[fn:oxhugo] I believe the ~ox~ part stands for org export.


*** Emacs

- Auto export

*** Org Mode

- Literate coding

*** Static Speed

*** Installation


*** My Old Blog

- It's still there
  - .htaccess issues

*** Tags

- Probably don't need them
** Using Git Hooks to Automate Blog Publishing                         :git:
:PROPERTIES:
:EXPORT_FILE_NAME: gitHooks
:EXPORT_DATE: 2019-09-10
:END:
*** Background
This blog is produced from a plaintext [[https://orgmode.org/][Org mode]] file
that is passed to an ~org~ module called
[[https://ox-hugo.scripter.co/][ox-hugo]]. Essentially, ~ox-hugo~ looks at the
~org~ file and produces
[[https://daringfireball.net/projects/markdown/][Markdown]] files, which are then
processed by a static website generation framework called
[[https://gohugo.io/getting-started/][Hugo]]. It goes without saying that these
are all fantastic, free tools.

*** My Prior Workflow

Originally, when ready to publish the blog, I would save the ~org~ file[fn:write]--this would trigger
an export process[fn:ox-auto] that produced the Markdown files. This would result in a
Hugo-friendly set of files that Hugo could then chew through to produce a
complete static website. I put together this workflow based largely on this
great post from Peter Cheng,
[[http://petercheng.net/posts/website-v2-setup/][Publishing a Website from Emacs
and Hugo]].

The Bash script to render and upload the site looks like this:

#+NAME: deploy.sh
#+CAPTION: Contents of the file ~deploy.sh~
#+BEGIN_SRC bash
#!/usr/bin/env bash

# Sync /public (containing finalised HTML and resources)
# to webserver (e.g. ianhocking.com)

# e - exit if command exits with error
# u - treat unset variables as an error
set -eu

username="username"
server="servername"

blogDir="/Users/ianuser/Sync/org/blog/programmer"

# Remove previous build of site
rm -r "$blogDir/public" || echo "No /public directory in blog directory $blogDir to delete"

# Build
cd $blogDir && hugo || echo "Cannot cd to blog directory $blogDir"

# Upload
rsync -r --verbose --compress --human-readable --progress --recursive public/. $username@$server:public_html/blog/
#+END_SRC


*** Why the Change?

Until yesterday, the [[https://git-scm.com/][Git]][fn:git] repository containing
the source of my site was private, but I decided that I wanted to put into the
~ox-hugo~ [[https://ox-hugo.scripter.co/doc/examples/][showcase]], so now it's
available on Github [[https://github.com/OolonColoophid/blog][here]].

*** Git Hooks

Git allows ~hooks~, which are simply scripts run by Git[fn:gitH]. You can find a
fuller explanation of them in various places.
[[https://hackernoon.com/automate-your-workflow-with-git-hooks-fef5d9b2a58c][Automate
Your Workflow with Git Hooks]] is a good one.

Essentially, with the directory holding your tracked files, you'll see
~.git/hooks~. Inside that, there are the hooks themselves.

Let's take a look at them.

#+BEGIN_SRC bash :exports output :results output
ls -g ~/Sync/org/blog/programmer/.git/hooks
#+END_SRC

Gives us:

#+RESULTS:
#+begin_example
applypatch-msg.sample
commit-msg.sample
copy_of_post-update
fsmonitor-watchman.sample
post-commit
post-update
pre-applypatch.sample
pre-commit.sample
pre-push
pre-push.sample
pre-rebase.sample
pre-receive.sample
prepare-commit-msg.sample
resources
update.sample
#+end_example

Some of these hooks are designed to be run by Git on a server (i.e.
receiving updates) and others locally (i.e. when sending). The details of which
hook suits which end of the process are provided by [[https://git-scm.com/docs/githooks][Git - githooks Documentation]].

The two hooks I'm interested in are ~post-commit~ and ~pre-push~. In the
directory listing above, you can see that both of these have the suffix
~.sample~ removed; that means that Git will pay attention to them. Additionally,
to make sure that the hooks execute (which are simple Bash scripts after all), we need to
make sure that execution privileges have been assigned:

#+BEGIN_SRC bash
chmod +x ls ~/Sync/org/blog/programmer/.git/hooks/post-commit
chmod +x ls ~/Sync/org/blog/programmer/.git/hooks/pre-push
#+END_SRC

*** My New Workflow

When I commit a change to the repository, I'd like ~git commit~ to run the hook
[[gitPost][post-commit]]. This hook will itself call ~git push~, which will notice the
[[gitPre][pre-push]] hook and then run [[deploy.sh][my deployment script]].

It's vitally important that the deployment script itself doesn't make changes to
the working tree, or we'll end up in a situation where Git branches diverge--a
difficult error to troubleshoot. For this reason, my ~.gitignore~ excludes:
~content/~, ~public~ and ~logs~.


#+NAME: gitPost
#+CAPTION: .git/hooks/post-commit
#+BEGIN_SRC sh
#!/bin/sh

{ echo '-- ' &&
	date &&
	echo 'Git hook .git/hooks/post-commit executed by git-commit' &&
	echo 'Hook will push master branch to remote origin' ; } >> /Users/ianuser/Sync/org/blog/programmer/logs/hooks.log

git push origin master

#+END_SRC

#+NAME: gitPre
#+CAPTION: .git/hooks/pre-push
#+BEGIN_SRC sh
#!/bin/sh

{ echo '-- ' &&
	date &&
	echo 'Git hook .git/hooks/pre-push executed by git-push' &&
	echo 'Hook will call deploy.sh' ; } >> /Users/ianuser/Sync/org/blog/programmer/logs/hooks.log

/Users/ianuser/Sync/org/blog/programmer/deploy.sh
#+END_SRC

Finally, I'm now able
to make a commit--this will get pushed to my [[https://github.com/OolonColoophid][Github repository]], the site built,
an the site uploaded to [[http://ianhocking.com][ianhocking.com]].


[fn:git] Git is a system for tracking file changes.

[fn:write] Or 'write the buffer to disk' in Emacs-speak.

[fn:gitH] Actually, any number of subcommands.

[fn:ox-auto] This is set with the variable ~org-hugo-auto-export-mode~ in
a dotfile in the blog directory (~.dirs-locals.el~).


** TODO Https and Http with Hugo :https:
:PROPERTIES:
:EXPORT_FILE_NAME: httpHttpsHugo
:EXPORT_DATE: 2019-09-10
:END:
** Merge Sort and Recursion                                             :Java:
:PROPERTIES:
:EXPORT_FILE_NAME: mergeSort
:EXPORT_DATE: 2019-12-31
:END:

One of the trickiest concepts of my [[https://www.cs.kent.ac.uk/masters/courses/msc-compsci/][MSc in Computer Science]] is recursion, which
is defined as the act of [[https://en.wikipedia.org/wiki/Recursion]['calling oneself']]. In the context of computer functions, calling
oneself is useful because it means doing whatever the function just did, but
again, on something it has produced. Tricky to get your head around; even
writing that last sentence was difficult!

As part of the learning process, I've been trying to clarify why I find
recursion hard. The answer seems to be that I want to follow the journey of
the recursion in a linear fashion; in other words, what is the program's state after the first
self call? What is it after the second? This soon becomes overwhelming
because there are too many elements in play. Whenever such confusion has
happened to me in the
past, the solution has lain in a better representation system. In other words, when
Roman numerals are making maths tricky, time to switch to Arabic.

There are many helpful ways of thinking about recursion out there. For instance, I found [[https://medium.com/@daniel.oliver.king/getting-started-with-recursion-f89f57c5b60e][this article]], which
contains the following insight:

#+begin_quote
When talking about writing recursive functions, most people focus on the fact that any recursive function needs to have two parts:
- A base case, in which the function can return the result immediately
- A recursive case, in which the function must call itself to break the current problem down to a simpler level
#+end_quote

This is great advice. It goes beyond thinking about recursion linearly, which
I've been trying to do, to thinking more about the algorithmic
perspective---what is this function actually trying to do? Well, it is trying to split
the problem into smaller pieces (recursive case), and when the pieces can't be made
any smaller (base case), the recursions reverse their sequence.

I wanted, however, to write a recursive program that tells me a bit about its
recursive journey, and for that I implemented the ~merge sort~ algorithm[fn:vneuman]. This was a
'three birds with one stone' situation. It not only helped my thinking about
recursion, but also about the algorithm itself, as well as giving me more
experience with Java.

I've put the full code (it's not long) on [[https://github.com/OolonColoophid/mergeSort][GitHub]], but you can see an example of the output
below. This uses the list of numbers from the [[https://en.wikipedia.org/wiki/Merge_sort][Wikipedia article on merge sort]]:
38, 27, 43, 3, 9, 82, 10 (shown in [[https://en.wikipedia.org/wiki/Merge_sort#/media/File:Merge_sort_algorithm_diagram.svg][this diagram]]).

The algorithm itself splits (function ~mergeSort~) the list into sublists until the lists are only of
one element each. Then, it merges (function ~merge~) the sublists into sorted
units of successively longer lengths until the original length is reached---and
thus we have 3, 9, 10, 27, 38, 43, 82.

Here's the output of the program (put the Wikipedia diagram alongside while you read):

#+begin_example
- FUNC mergeSort starting
  ...with array [38, 27, 43, 3, 9, 82, 10]
  Recursion INTO FUNC mergeSort for left half
- FUNC mergeSort starting
  ...with array [38, 27, 43, 3]
  Recursion INTO FUNC mergeSort for left half
- FUNC mergeSort starting
  ...with array [38, 27]
  Recursion INTO FUNC mergeSort for left half
- FUNC mergeSort starting
  ...with array [38]
  Base condition (array indivisible)
  Recursion OUT of FUNC mergeSort following base condition
  Recursion INTO FUNC mergeSort right half
- FUNC mergeSort starting
  ...with array [27]
  Base condition (array indivisible)
  Recursion OUT of FUNC mergeSort following base condition
  Base condition met for left and right halves!
- FUNC merge starting
  - 38 > 27 so add 27 to master array and move right pointer
  Making array: [27, 38], now stored master array

  Recursion INTO FUNC mergeSort right half
- FUNC mergeSort starting
  ...with array [43, 3]
  Recursion INTO FUNC mergeSort for left half
- FUNC mergeSort starting
  ...with array [43]
  Base condition (array indivisible)
  Recursion OUT of FUNC mergeSort following base condition
  Recursion INTO FUNC mergeSort right half
- FUNC mergeSort starting
  ...with array [3]
  Base condition (array indivisible)
  Recursion OUT of FUNC mergeSort following base condition
  Base condition met for left and right halves!
- FUNC merge starting
  - 43 > 3 so add 3 to master array and move right pointer
  Making array: [3, 43], now stored master array

  Base condition met for left and right halves!
- FUNC merge starting
  - 27 > 3 so add 3 to master array and move right pointer
  - 27 <= 43 so add 27 to master array and move left pointer
  - 38 <= 43 so add 38 to master array and move left pointer
  Making array: [3, 27, 38, 43], now stored master array

  Recursion INTO FUNC mergeSort right half
- FUNC mergeSort starting
  ...with array [9, 82, 10]
  Recursion INTO FUNC mergeSort for left half
- FUNC mergeSort starting
  ...with array [9, 82]
  Recursion INTO FUNC mergeSort for left half
- FUNC mergeSort starting
  ...with array [9]
  Base condition (array indivisible)
  Recursion OUT of FUNC mergeSort following base condition
  Recursion INTO FUNC mergeSort right half
- FUNC mergeSort starting
  ...with array [82]
  Base condition (array indivisible)
  Recursion OUT of FUNC mergeSort following base condition
  Base condition met for left and right halves!
- FUNC merge starting
  - 9 <= 82 so add 9 to master array and move left pointer
  Making array: [9, 82], now stored master array

  Recursion INTO FUNC mergeSort right half
- FUNC mergeSort starting
  ...with array [10]
  Base condition (array indivisible)
  Recursion OUT of FUNC mergeSort following base condition
  Base condition met for left and right halves!
- FUNC merge starting
  - 9 <= 10 so add 9 to master array and move left pointer
  - 82 > 10 so add 10 to master array and move right pointer
  Making array: [9, 10, 82], now stored master array

  Base condition met for left and right halves!
- FUNC merge starting
  - 3 <= 9 so add 3 to master array and move left pointer
  - 27 > 9 so add 9 to master array and move right pointer
  - 27 > 10 so add 10 to master array and move right pointer
  - 27 <= 82 so add 27 to master array and move left pointer
  - 38 <= 82 so add 38 to master array and move left pointer
  - 43 <= 82 so add 43 to master array and move left pointer
  Making array: [3, 9, 10, 27, 38, 43, 82], now stored master array

---
Sorted result:[3, 9, 10, 27, 38, 43, 82]

#+end_example

So putting some comments in the output of merge sort really helped me to
understand the relationship between the algorithm and the recursive code, and I
hope it might help you.

[fn:vneuman] Footnotes are recursive! This is just a note to remind you that the
merge sort algorithm is a very efficient way of sorting a list of numbers by
magnitude, since the time taken to sort has more to do with the number of
recursion levels than the linear elements in the list (at least, that's my impression). It was partly created by [[https://en.wikipedia.org/wiki/John_von_Neumann][John von Neumann]], and I read much about him
and the digital revolution in a book called [[https://www.amazon.co.uk/Turings-Cathedral-Origins-Digital-Universe/dp/014101590X][Turing's Cathedral]].


** Solving Sudoku Puzzles with Prolog
:PROPERTIES:
:EXPORT_FILE_NAME: prologCLP
:EXPORT_DATE: 2020-05-21
:END:

[[https://en.wikipedia.org/wiki/Prolog][Prolog]] has been a mind-expanding discovery. It is, at once, the most frustrating
computer language I've ever used, and the most elegant and expressive. It
works by taking a question about a notional world and trying to make it true. Any
variables that are needed to achieve this truth can then feed into other
questions. Sound weird? It is!

Because Prolog is non-imperative, it can make those of us used to imperative
programming bang our heads on the desk a few times; but it turns out there are
advantages to describing your problem well and letting the computer figure out
the program to solve it. As long as the description works, the program should work, and one
thing's for sure: the description is a lot shorter and clearer.

Towards the end of my logic programming module at the University of Kent, we
were introduced to constraint-based programming. In a nutshell, this works by
describing a domain (e.g. a map of the world's countries), variables
(e.g. the countries), and values those variables can take (e.g. colours). We can
then give a constraint: 'I would like each country on the map to have a colour,
but neighbouring countries must not have the same colour'. Prolog--with some
help from a finite domain constraint programming library, [[https://www.swi-prolog.org/man/clpfd.html][CLP(FD)]]--will then pootle off
and provide you with all of the ways in which this constraint can be fulfilled.
In this case, it would be the number of maps that exist where neighbouring
countries have different colours, together with the colours themselves.

Now, I love a good [[https://en.wikipedia.org/wiki/Sudoku][Sudoku]]. As Wikipedia
tell us, the objective of Sudoku is:

#+BEGIN_QUOTE
...is to fill a 9×9 grid with digits so that each column, each row, and each of the nine 3×3 subgrids that compose the grid (also called "boxes", "blocks", or "regions") contain all of the digits from 1 to 9. The puzzle setter provides a partially completed grid, which for a well-posed puzzle has a single solution.
#+END_QUOTE

A perfect way to exercise my Prolog skills to implement the constraints! It took
me a couple of hours and works successfully--in an imperative language like Python, this would have been a lot longer,
and probably involving a few bugs. Plus, it works
with
the [[https://www.conceptispuzzles.com/index.aspx?uri=info/article/424][world's
hardest sudoku]]!

The code is over at [[https://github.com/OolonColoophid][my Github page]].

Finally, in my Prolog journey, I came across some great learning resources
beyond those offered by Stefan and Andy at UKC. [[https://learnxinyminutes.com/docs/prolog/][Learn prolog in Y
Minutes]] takes a fairly 'quick and dirty' approach, but will get you to speed.
[[http://lpn.swi-prolog.org/lpnpage.php?pagetype=html&pageid=lpn-htmlli4][Learn Prolog Now!]] is more in depth.

** TODO The Crack of Doom                                            :setup:
:PROPERTIES:
:EXPORT_FILE_NAME: doomSetup
:EXPORT_DATE: 2019-09-01
:END:

** Java Puzzles: Oddity                                               :Java:
:PROPERTIES:
:EXPORT_FILE_NAME: javaPuzzles1
:EXPORT_DATE: 2019-10-05
:END:

I'm not that far into my Java journey, but I've come across this interesting
Java puzzle, set by one of my MSc instructors. I'm setting it down here to help
me remember it. The puzzle isn't unique to our course, and I've seen it
discussed elsewhere (not that I searched until I'd given it a thorough
working over privately, first!).

Essentially, we are asked: "Is the method below to determine whether a number is
odd correct?"

#+NAME: isOdd
#+BEGIN_SRC java :classname "MyClass" :results output

public class MyClass {

    public static boolean isOdd(int i) {
        return i % 2 == 1;
    }

    public static void main(String[] args){

        System.out.println("1 is " + isOdd(1));
        System.out.println("2 is " + isOdd(2));    }
}

#+END_SRC

~isOdd~ is a predicate function, in that it should return ~true~ for odd numbers
and ~false~ for even numbers. The version you see above, [[isOdd][isOdd]], has some extra
wrapper Java around it--to make it work with Org Babel--, including the two print statements in the ~main~ method,
but is otherwise identical to the one set by our instructor.

Intuitively, it looks correct. It applies the function ~modulus 2~ (i.e. the
remainder when the parameter is divided by two). This should return ~0~ for even
numbers - what we want - and ~1~ for odd numbers - also what we want.

You can see my testing in the table below.

#+CAPTION: Testing isOdd
| Input | Modulus Result (% 2) | Function Should Output | Function Outputs |
|-------+----------------------+------------------------+------------------|
|     5 |                    1 | True                   | True             |
|     4 |                    0 | False                  | False            |
|    11 |                    1 | True                   | True             |
|   100 |                    0 | False                  | False            |
|    -5 |                    1 | True                   | False            |
|     0 |                    0 | False                  | False            |

Aha - it fails with negative numbers.

This made me double check how a modulus works with negative numbers. It turns out that, in
mathematics, the modulus of a negative is normally positive (i.e. without a
sign). However, some programming languages - including Java - keep
the sign. I can see this is helpful in retaining a something about the
calculation. Essentially, it allows us to recover that the one of the terms in
the modulus was negative.

And this negative number case is indeed the failure point for the method. To make ~isOdd~ work for
negatives, our conditional should test for a non-zero remainder such as ~-1~ in
the case of modulus ~5~. The corrected
source is below, along with my test numbers from the table above.

#+BEGIN_SRC java :classname "MyClass" :results output :exports both

public class MyClass {

    public static boolean isOdd(int i) {
        return i % 2 != 0;
    }

    public static void main(String[] args){

        System.out.println("Is 5 odd? " + isOdd(5));
        System.out.println("Is 4 odd? " + isOdd(4));
        System.out.println("Is 11 odd? " + isOdd(11));
        System.out.println("Is 100 odd? " + isOdd(100));
        System.out.println("Is -5 odd? " + isOdd(-5));
        System.out.println("Is 0 odd? " + isOdd(0));
    }
}

#+END_SRC

** TODO Java Puzzles: When is a plus not a plus?                      :Java:

"Provide type declarations so that this is legal:

1. x += i;

And this is not:

2. x = x + i;

Explain why this is so."

This sounds like there is a difference bewteen + and +=, which is not obvious.
(Both statements should add x to i.)

OK, Stack Overflow tells me that these are *not* equivalent.

| Operation | Type of x | Type of i | Compilation |
|-----------+-----------+-----------+-------------|
| x = x + i | int       | long      | FAIL        |
| x = x + i | int       | int       | Yes         |
|-----------+-----------+-----------+-------------|
| x += i    | int       | double    | Yes         |
| x += i    | int       | int       | Yes         |
| x += i    | double    | int       | Yes         |

Note that any assignment of a variable to a decimal is a double (it's more
accurate than float, and Java prefers it because it is less lossy). Override by
putting an f at the end of the number, e.g. 3.2f.

#+BEGIN_QUOTE
A compound assignment expression of the form E1 op= E2 is equivalent to E1 = (T)
((E1) op (E2)), where T is the type of E1, except that E1 is evaluated only
once.

This code block is correct:

short x = 3;
x += 4.6;

It results in 7 because the first expanded operand take the type short, and this
is applied to the second operand. It's the equivalent of this:

short x = 3;
x = (short)(x + 4.6);

-- https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.26.2
#+END_QUOTE


#+BEGIN_SRC java :classname MyClass :results output
public class MyClass{
    public static void main(String[] args) {
        double i = 1.7;
        int x = 2;

        System.out.println(x += i);
        System.out.println(x = x + i); // Uncomment and code will fail
    }
}
#+END_SRC

#+RESULTS:
: 3

So the short answer is that ~x += i~ can have incompatible types. So defining
~x~ as ~int~ and ~i~ as ~double~ means that ~i~ will be cast an as ~int~ and the
operation can proceed.

No casting happens with ~x = x + i;~ - there are incompatible types.

No solution suggested yet in Friday's lecture! Maybe after the weekend.
** TODO Java Puzzles: Letters and Numbers                             :Java:

"What does this print?"

#+BEGIN_SRC java :classname MyClass :results output
public class MyClass{
    public static void main(String[] args) {
        String letters = "ABC";
        char[] numbers = {'1','2','3'};
        System.out.println(letters + " as easy as " + numbers);
    }
}
#+END_SRC

"Why?"

"Fix it."

#+RESULTS:
: ABC as easy as [C@7a81197d

According to [[https://stackoverflow.com/questions/409784/whats-the-simplest-way-to-print-a-java-array][What's the simplest way to print a Java array? - Stack Overflow]],
when you try to print an array you get the className + '@' + the hex of the
hashCode of the array, as defined by Object.toString(). Printing a string
directly seems to override this method and give the user 'what they mean'.

The solution is to use the method ~toString(arr)~ in the class ~Arrays~ - but I
don't seem to have access to that class. Do I need to load a library? Perhaps
~import java.util.Arrays;~ will work.


** Some .httaccess Settings to Separate my Blogs
:PROPERTIES:
:EXPORT_FILE_NAME: where-do-people-go
:END:

Until recently, if a visitor went to [[https://ianhocking.com]], they'd be redirected to my
WordPress blog of several years called [[https://ianhocking.com/twl/][This Writing Life]]. I now want to
move this to one side this so I can give prominence to my [[https://ianhocking.com][new programmer blog]].
However, I'd been having trouble keeping the two blogs separate.

If a person went to https://ianhocking.com, they'd see my
programmer blog. But if they requested a page that did not exist, they'd always
get directed to my
writing blog. Not only that, the writing blog's search was broken (as was any
post preview within WordPress dashboard itself, caused by the preview sending an 'empty' URL to my
domain, which would be redirected to my programming blog).

#+CAPTION: Desired behaviour
| URL                                                               | Type           | Behaviour                          |
|-------------------------------------------------------------------+----------------+------------------------------------|
| https://ianhocking.com                                            | exists         | Redirect to programmer blog        |
| https://ianhocking.com/something                                  | does not exist | Redirect to programmer blog        |
| https://ianhocking.com/2013/06/22/writing-a-novel-using-markdown/ | does exist     | Redirect to This Writing Life blog |

I had a frustrating time with .htaccess files---the desired behaviour of sending
this to either the programming blog or the writing blog depending on the URL
succeeded intermittently, basically because I was having trouble fully
understanding the rewrite rules that WordPress had applied to the
~.htaccess~[fn:htaccess] file. In a nutshell, WordPress alters this file for the
root folder (in my case, ianhocking.com) and then intercepts any URLs that don't
exist as files on the server. Because permalink URLs are often abritrary, and
don't directly map onto the server's directory structure, this is a good way of
dealing with permalinks.

[fn:htaccess] A file used by the Apache web server to decide how pages are
served in a given directory.


Here is the relevant portion of my .htaccess file, with
explanations of what each of these lines does based on a handy-dandy page over at
[[http://glennmessersmith.com/pages/wphtaccess.html][Glenn Messersmith's site]].

#+BEGIN_SRC .htaccess

# BEGIN WordPress
 <IfModule mod_rewrite.c>             # Is the server able to do URL rewrites?
                                      # Begin block
 RewriteEngine On                     # Start rewriting URLs
 RewriteBase /                        # Base URL relative to the WordPress files
 RewriteRule ^index\.php$ - [L]       # If requested file is index.php,
                                      # take user there and stop processing rules
 RewriteCond %{REQUEST_FILENAME} !-f  # Does the requested file not exist?
 RewriteCond %{REQUEST_FILENAME} !-d  # Or does the directory not exist?
 RewriteRule . /index.php [L]         # Otherwise replace request with index.php
                                      # and go there (WordPress will still know
                                      # the original request URL)
 </IfModule>                          # End block
# END WordPress

#+END_SRC

Elsewhere in the .htaccess file, I set the ~DirectoryIndex~ (i.e. the place
you're taken if only the directory is requested) to my new blog's 404 page:

#+BEGIN_SRC .httaccess
DirectoryIndex /prog/index.htm /prog/index.html prog/index.php
ErrorDocument 404 /prog/404.html
#+END_SRC

*** The Fix

My solution was to move the blog to a subdirectory, /twl/, so it's now accessed at
https://ianhocking.com/twl/. I updated the permalinks settings within WordPress
itself (Settings > General Settings > Site Address (URL):
https://ianhocking.com/twl), so that WordPress is aware that /twl/ should be
part of the permalink address.

This meant I could the tweak the .htaccess file (in both the site root and the
WordPress directory) with the effect that WordPress would only intercept
non-existent files or directories if they were prefixed by ~twl~. This allows me
to separate the blogs more senisbly.

#+BEGIN_SRC .httaccess
RewriteRule ^twl.* /index.php [L]
#+END_SRC

One last thing. I had worried that this would break all the incoming links to my writing
blog. However, it happens to be the case that these posts are date-based, and
thus always begin with a number. Another ~RewriteRule~ to detect these and throw to the
WordPress index.php page would fix it. So here is my final .htaccess file
(again, one version for the root of the domain and another for the WordPress
directory itself).

#+BEGIN_SRC .httaccess

# BEGIN WordPress
 <IfModule mod_rewrite.c>
 RewriteEngine On
 RewriteBase /
 RewriteRule ^index\.php$ - [L]
 RewriteCond %{REQUEST_FILENAME} !-f
 RewriteCond %{REQUEST_FILENAME} !-d
 RewriteRule ^twl.* /index.php
 RewriteRule ^[0-9].* /index.php [L]
 </IfModule>
# END WordPress

#+END_SRC

** Our First Foster Cat, Sheldon :cats:
:PROPERTIES:
:EXPORT_FILE_NAME: sheldon
:EXPORT_DATE: 2022-01-12
:END:

I wrote the below in the late spring of 2021.

*** Small Packages

My wife, Britta, went to bed a few minutes before me, calling down, 'Good night!' as I was locking the front door. Just before I called back, I thought I heard a stranger say, 'Good night.'

I called, 'What did you say?'

'Nothing---did you say something?'

Naturally, I went to bed thinking that there was a person in our house---friendly enough, it seemed---wishing us both a good night.

It had been six days since Sheldon died.

*** You Too Will Die

I have a wireless router on the other side of the bedroom whose top light sometimes keeps me awake, so I've covered it with the most opaque thing I have to hand: a large, one-off coin with a skull emblem and a Latin tag reading 'Memento mori': remember, death. Despite this, the router still puts out a diffuse glow, and that glow went from blue to purple at some point yesterday night. Half awake, I felt sure I was drifting on a dark sea, rafted and cold, and this purple light came from the window of a clifftop house a mile or so to leeward, somewhere I might call home, or called to me as home. I still had half a notion that there was someone in our house. I got out of bed---my dream bed, that is, since I was still fast asleep---and opened the door.

Although the hallway has an automatic light, it hadn't turned on. I could see the jade eyes of a charcoal-grey cat looking at me from the darkness, just as they'd looked at me from the darkness of the curtained shelving in the spare room, those first few days. It was Sheldon. He recognised me, but wasn't relaxed; he retained the nervousness that overcame him when noticing me or Britta.

Was I pleased to see him? Are we ever pleased to see the dead? Sometimes, in dreams, I will meet and hug a long-passed relative---someone I barely touched while alive---and ask them how they're doing and where they've been and what they've seen. I'll tell them I'm married now, and that they've missed other births and deaths. But there is always a glow of awkwardness. I am alive and they are not. Will they resent me? But they often act wiser and happier than before. In the dream, I will put this wisdom down to the experience of death itself.

Relaxing his wise eyes, Sheldon turned in that way he had of turning when I approached with his  breakfast. In this way we went up the stairs, as we had many times before, to my office, which had been his world with us. But the scene up there was more like the belfry of an village church. My first thought was, /Blimey, Britta's been storing stuff up here. Leaving equipment and bric-a-brac./ There were opened plastic boxes filled with old calendars, shoes, rope, you name it; and I saw everything through a kind of dim, dusty fug. The floor was busy with cats. At least five or six, all of different kinds and all unfamiliar. They rubbed themselves against my legs and looked hopefully from their empty food bowls to me.

Of Sheldon there was no sign. I didn't call out to him or look for him. I knew he'd gone. He'd led me up here, and it was only when I woke in the morning that I realised he was telling me that there were other cats to take care of, that I shouldn't stop.

*** Memento Sheldon

After breakfast he would wander into the centre of my office and lie on his side, staring into space like a poet. It was not done to touch him. If I broke this rule, he would labour to his feet and move to a spot out of arm's reach, and settle once more.

I would often turn to look at him for seconds at a time, thinking to myself: /Ian, this is odd behaviour. You're staring./ But cats are themselves a collection of odd behaviours, so I figured I would keep doing it, and Sheldon didn't mind. Just looking at him made me happy.

When we recycle things, or throw things away, Britta and I like to say 'Thanks'. It helps. I tried to say thanks to Sheldon but it wasn't in my power to do so. I settled for putting my fingers into his cage. He stilled briefly at my touch, but only briefly.

He meowed only once or twice in the time we knew him. Otherwise, he remained silent. A knock at the front door early in his stay triggered a kind of muffled wail that warbled as he jogged back to the darkness behind the shelves of the spare room. It was like when you're a kid and your friend punches you in the back and your voice deflects around like a Dalek. We wondered what associations he had.

He went to the vet twice. On the first occasion, he went limp like a trained civic protester before I could pick him up. Then, with me suspending him over the carrier, he sprang into a surprisingly effective starfish shape that almost prevented him going in. When he came back that night, I expected him to bear a grudge, or at least be grumpy, but he seemed delighted to see us and tolerated an unusual amount of physical contact. On the second occasion, when he had half an hour to live, he went in easily, trustfully.

He didn't poo for three days. When he did, were texting our friends like he was a furry child winning an egg-and-spoon race.

It took a week with us before his tail, tapping the ground impatiently like an old man's cane while waiting for a bus, stilled, and then slowly rose to the vertical as he mooched about.

He purred slowly when observed, clicking like a Geiger counter, the radioactivity increasing with our proximity, or our gaze, or just the faraway sound of Britta closing a kitchen drawer.

Breathing was hard for him. He had to concentrate on it.

I put everything in the front and took care of everything that came out the back.

I didn't really understand him. It was three days before I Googled 'Why is my neutered cat trying to have sex with my arm?' but it didn't make things clearer.

When it rained he would look at the window and frown, if cats frown.

When it was sunny, he lay in the sunlight and his charcoal fur yellowed and aged, and he was too hot to sleep, but didn't move.

We took pictures for his future owners. I'll hang the best one on the wall of the spare room.

** Changing Career from a Psychologist to a Software Developer
*** My First and Last Lectures
*** The Programme Review Meeting
*** Why I Chose My MSc
*** The Good Bits
*** The Bad Bits
** ChatGPT: Looking into the Abyss :AI:ML:
:PROPERTIES:
:EXPORT_FILE_NAME: chatGPT
:EXPORT_DATE: 2023-01-08
:END:

I will always read an article by John Noughton, who is professor of the public understanding of technology at the Open University, where I worked a few years back teaching psychology. In [[https://www.theguardian.com/commentisfree/2023/jan/07/chatgpt-bot-excel-ai-chatbot-tech][The ChatGPT bot is causing panic now - but it'll soon be as mundane a tool as Excel]] he writes:

#+BEGIN_QUOTE
at best, it’s an assistant, a tool that augments human capabilities.
#+END_QUOTE

Which I think is a good summary. However, he also linked to a paper by the AI researcher Murray Shanahan called [[https://arxiv.org/abs/2212.03551][Talking About Large Language Models]], as an 'antidote to [our] tendency to anthropomorphise systems such as ChatGPT'. This piqued my interest because anthropomorphism--the tendency to read human characteristics into things that ostensibly have none--cuts to the heart of our difficulty in understanding how to react to ChatGPT. I would argue that humans generally do exhibit anthropmorphism too much; but that isn't a reason to dismiss the notion that ChatGPT may be rather more human-like that people, including Shanahan, would be comfortable with.

What follows is a set of notes/marginalia on his paper. I don't present this as a particular critique, although I would like to see him consider these points in more detail. At the close of the paper he thanks several reviewers for 'robust' discussion; I wonder how this discussion went.

Remember that ChatGPT is a large language model. It uses a transformer architecture, which, unlike traditional connectionist architectures, and others, is somewhat more difficult to look inside when we want to know how it is making prediction decisions.

Murray begins:

#+BEGIN_QUOTE
...it is a serious mistake to unreflectingly apply to AI systems the same intuitions that we deploy in our dealings with each other, especially when those systems are so profoundly different from humans in their underlying operation. (p 1, para 4)
#+END_QUOTE

True enough. But are there many people who do this unreflectingly? He is attacking a straw man here.

He continues:

#+BEGIN_QUOTE
To ensure that we can make informed decisions about the trustworthiness and safety of the AI systems we deploy, it is advisable to keep to the fore the way those systems actually work, and thereby to avoid imputing to them capacities they lack, while making the best use of the remarkable capabilities they genuinely possess. (p 1, para 5)
#+END_QUOTE

I wonder whether the capacities we naturally impute to other people--not machines--such as free will are present in these other people. Yes, free will sounds like something we all obviously possess, but this is not so obvious to many philosophers who have considered it. It may also seem obvious to us that other people have meaningful internal lives, but this notion can lead to difficulties when studied further, too.

He continues:

#+BEGIN_QUOTE
[our] language-involving activity makes sense because we inhabit a world we share with other language users. (p 2, para 1)
#+END_QUOTE

This is true enough. However, Murray seems to want this only for ourselves, when it may be that ChatGPT exists in a world with other language users.

He writes:

#+BEGIN_QUOTE
[large language models] are generative mathematical models of the statistical distribution of tokens in the vast public corpus of human-generated text, where the tokens in question include words, parts of words, or individual characters including punctuation marks. They are generative because we can sample from them, which means we can ask them questions. But the questions are of the following very specific kind. “Here’s a fragment of text. Tell me how this fragment might go on. According to your model of the statistics of human language, what words are likely to come next?” (p 2, para 2)
#+END_QUOTE

This is a clear summary. However, there are two things here that might be conflated. First, despite the vast the corpus used to train the model, it is relatively poor (in type) compared to the corpus to which a child is exposed (and, remember, a child can operate contingently on its environment to test its own language model; plus, adults will adapt themselves to assisting this endeavour). This is clearly a limitation. Second, Murray considers the prediction task to be a trivialisation of how humans acquire language, and this is not necessarily the case. Humans may well be born with some language rules; but we already know that prediction-based models (going back to early research in simple recurrent networks) can require of themselves a growing knowledge of grammar or language use as their way of improving performance on the prediction task. Prediction--the urge to reduce surprise, to harmonise oneself internally with one's environment--may well be at the heart of language acquisition.

More on anthropomorphism:

#+BEGIN_QUOTE
It is perfectly natural to use anthropomorphic language in everyday conversations about artefacts, especially in the context of information technology. We do it all the time. My watch doesn’t realise we’re on daylight saving time. My phone thinks we’re in the car park. (p 3, para 1)
#+END_QUOTE

Murray goes on to identify this as the ~intentional stance~ tendency. However, while we might agree that ascribing intentionality to a watch stretches what we mean by intentionality (for me, this is a system that contains, in some sense, 'meaning'), it can also be fruitful to ask whether even more complex systems--such as the human brain, or the models of reality running within it--are themselves intentional. Many people, who have thought about this, believe that ascribing intentionality to brains is problematic because it tends to boil down the brain needing a special substance to 'house' the meaning, which is clearly a shaky argument.

Murray then makes a comment that I find difficult to follow:

#+BEGIN_QUOTE
To be clear, it is not the argument of this paper that a system based on a large language model could never, in principle, warrant description in terms of beliefs, intentions, reason, etc. Nor does the paper advocate any particular account of belief, of intention, or of any other philosophically contentious concept. (p 3, para 3)
#+END_QUOTE

It seems to me that, with his narrow definition of 'knowledge' and 'belief' as 'things that human brains do' (I'm paraphrasing), it is difficult to see how a language model could ever be described as having a belief, given this. And his paper is certainly advocating a particular account of 'belief' etc. -- it is an account that requires these things to be special, limited to something that brains do (for some reason), and perhaps even limited to higher mammalian brains. (The crows would like to have a word, and perhaps some octopuses.)

Continuing with his theme of the specialness of humans, he writes:

#+BEGIN_QUOTE
Humans are the natural home of talk of beliefs and the like, and the behavioural expectations that go hand-in-hand with such talk are grounded in our mutual understanding, which is itself the product of a common evolutionary heritage. (p 6, para 6)
#+END_QUOTE

This is difficult to justify. Why are human brains the natural home of beliefs? Why can't a model that arrives at similar representations have the same privilege?

It was a thoughtful paper, which goes on to say much more than I've commented on here (and I've made many more scrawlings on the paper copy that I've put into this post). Murray rightly points out that ChatGPT has not learned through environmental interaction; this is one of the aspects of the problem of embodiment. Is this a true limitation of this class of model, however? Is it an impossibility or an engineering problem, even if very difficult? If ChatGPT shows us one thing, it's that very difficult engineering problems can be solved, and when they are, they present us with equally difficult questions about our own special place in the universe.
** What the hell is this thing? :AI:ChatGPT:GPT4:
:PROPERTIES:
:EXPORT_FILE_NAME: hellThing
:EXPORT_DATE: 2023-04-08
:END:
I've been looking through old drafts of my novel, [Flashback](https://www.amazon.co.uk/Flashback-Saskia-Brandt-Ian-Hocking/dp/1549762753/ref=nodl_?dplnkId=3502ef3b-ba01-43c0-b228-d843c1bdb228), which features several technologies that did not exist when I wrote it back in 2011. First, a time machine that used centrifuges to create a gravity-based mechanism for sending objects backward in time: fictional, and remains so. Second, a human-brain interface that imposed a donor personality: still science fiction. Third, a credit-card sized personal assistant called Ego, which could listen for human speech, respond verbally, and take action (sometimes secretly) to achieve the goals it had been set.

In this scene, Ego is present when a hacker called Jem breaks into Saskia Brandt's locked study. It wants her to turn on the computer.

#+BEGIN_QUOTE
‘What the hell is this thing? Some kind of PDA?’

The credit card was small, but its voice was rich. ‘I don’t understand. Please power-on the computer.’

‘Where are you?’

‘I don’t understand.’

Jem tapped the desktop computer’s power switch. She left the card next to it while she returned to the door and pressed her ear to the wood. Silence. ‘I want to know who is controlling this device.’

‘I am.’

‘I understand that. But where are you and who are you?’

‘I am here and my name is Ego.’

Turning from the door, she paced the room like a gallery visitor perplexed by an exhibit. ‘Like the cat. Saskia’s cat is called Ego.’

A pause. ‘I didn’t know that.’

‘What do you know?’

‘Many things.’

Jem took the card and slapped it across the edge of the desk. ‘Don’t do that,’ it said.

‘Tell me who you are, or I’ll cut the power to Saskia’s desktop.’

‘My name is Ego. I am a computer-based agent.’
#+END_QUOTE

Things rarely come to pass in the manner they are described in science fiction, often because science fiction is only superficially about predicting the future. But it was certainly at the back of my mind, as we approached the year 2023 (the 'future' setting for key scenes in [[https://www.amazon.co.uk/Deja-Vu-Ian-Hocking/dp/1907389229][Deja Vu]] and [[https://www.amazon.co.uk/Flashback-Saskia-Brandt-Ian-Hocking/dp/1549762753][Flashback]]) that the work was about to become dated. Its fictional European Union, for instance, still included the UK. But the one thing I was quite confident about - and, indeed, would have bet could never happen - was that a conversation such as the one above could have taken place between a person and a computer. That, I think, is turning out to be wrong in interesting, amazing, and perhaps frightening ways.

At uni, I taught artificial intelligence to my psychology students for several years. The course was based on the Connectionist Summer School that used to run at Cambridge; I never attended the school itself, but was taught it second-hand by Jon Loose at the University of Exeter in the late 1990s. Those were quite heady days. Connectionism was visiting various areas of psychology with the subtlety of a drive-by shooter. The flowchart, symbolic-first brigade became wary of these parsimonious, neuron-inspired models that often explained phenomena using simpler architectures. But the models were frustratingly fragile; start with the wrong number of nodes, the wrong bias, the wrong learning rate, and you had nothing. Get those parameters right and you had a model of, say, the past tense. But how did the behavior of these models map to people? For instance, if you had a recurrent network trained on language that could begin to pull out grammar merely through exposure (no Chomsky-like pre-programmed knowledge required), what empiricial predictions did that give us that we could test on humans in the lab? What, if any, claim did such a model make about time-related behaviours during language processing tasks like the skipping of the eye across words in a sentence, which we had long known to reflect processing difficulty?

Part of the reason I did my PhD in psycholinguistics is that I was intuitively certain of the ability for a well-motivated system to pull correspondences out of language on the basis of paying close attention to the data. The mechanism wasn't clear to me, but I had a hunch that prediction was the key. If you have to predict, you have to understand - maybe not completely - but you do have to understand. I don't want to present this as some great insight on my part, because it was a commonly held idea, even though it had vague, unpleasant associations with behaviourism, which had driven many of us into the more cognitive (structured) side of things to begin with.

Here we are more than twenty years later. Prediction indeed had the power. We just needed a way to practically implement it. (Steven Wolfram's 10k word blog post provides a nice overview: [What is ChatGPT and Why Does It Work?](https://writings.stephenwolfram.com/2023/02/what-is-chatgpt-doing-and-why-does-it-work/).)

GPT-4 has shown that the ostensibly simple task of attempting to predict the next element in a sequence (in this case, the language data on the internet) works--to some unknown but non-trivial extent. It appears to have uncovered through statistical means some properties of the way in which humans understand reality, and internalized them. What knowledge does it contain? We're not sure, in detail. Is it self-aware? Almost certainly not. Is it intelligent? Yes, for a generous definition of intelligence. Is it coming for us? Maybe; we can't really tell at the moment. The immediate future is now one that features a wonderful, naive, quick, and occasionally mendacious AI that will certainly boost white-collar productivity. The longer-term future is less clear.

You can read about Microsoft researchers (otherwise unconnected to ChatGPT and GPT-4) finding [nascent abilities in GPT-4](https://arxiv.org/abs/2303.12712); somewhat credulous but full of examples where GPT-4 shows an uncanny ability to operate in domains that I would never have guessed would be accessible to a large language model. Lex Fridman talking to Eliezer Yudkowsky on [the Dangers of AI and the End of Human Civilization](https://www.youtube.com/watch?v=AaTRHFaaPG8&t=4057s) is another high point; Yudkowsky does not rate our chances against AI, and has apparently sound arguments.

As Jem said, What the hell is this thing? I'm not sure. It's quite possible that, fundamentally, we'll never know. The mind of GPT-4 is a matrix of fractional numbers that can give you advice on where to shop in Rome (in Italian? sure!) or discuss ancient Stoicism, or write the code to produce the Fibonacci sequence in any given computer language. This isn't the car to the horse, or the transistor to the vacuum tube, or the jet engine to the propeller. This is the AI to us.
