<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dr Ian Hocking</title>
    <link>//ianhocking.com/prog/</link>
    <description>Recent content on Dr Ian Hocking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 19 Aug 2020 00:00:00 +0100</lastBuildDate>
    
	<atom:link href="//ianhocking.com/prog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Baker Street</title>
      <link>//ianhocking.com/prog/pages/bakerstreet/</link>
      <pubDate>Wed, 19 Aug 2020 00:00:00 +0100</pubDate>
      
      <guid>//ianhocking.com/prog/pages/bakerstreet/</guid>
      <description>Baker Street is a natural deduction tool for macOS written in Swift. It is open source and you can view the code on Github.
Manual Download.
Overview Available for macOS (10.12 -), Baker Street is a free-form tool that helps you produce natural deduction proofs in propositional logic. Use Baker Street to enter your proof, check for errors, clarify relationships between proof lines, preview, and export your proof in several formats.</description>
    </item>
    
    <item>
      <title>Solving Sudoku Puzzles with Prolog</title>
      <link>//ianhocking.com/prog/posts/prologclp/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0100</pubDate>
      
      <guid>//ianhocking.com/prog/posts/prologclp/</guid>
      <description>Prolog has been a mind-expanding discovery. It is, at once, the most frustrating computer language I&amp;rsquo;ve ever used, and the most elegant and expressive. It works by taking a question about a notional world and trying to make it true. Any variables that are needed to achieve this truth can then feed into other questions. Sound weird? It is!
Because Prolog is non-imperative, it can make those of us used to imperative programming bang our heads on the desk a few times; but it turns out there are advantages to describing your problem well and letting the computer figure out the program to solve it.</description>
    </item>
    
    <item>
      <title>Merge Sort and Recursion</title>
      <link>//ianhocking.com/prog/posts/mergesort/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>//ianhocking.com/prog/posts/mergesort/</guid>
      <description>One of the trickiest concepts of my MSc in Computer Science is recursion, which is defined as the act of &amp;lsquo;calling oneself&amp;rsquo;. In the context of computer functions, calling oneself is useful because it means doing whatever the function just did, but again, on something it has produced. Tricky to get your head around; even writing that last sentence was difficult!
As part of the learning process, I&amp;rsquo;ve been trying to clarify why I find recursion hard.</description>
    </item>
    
    <item>
      <title>Java Puzzles</title>
      <link>//ianhocking.com/prog/posts/javapuzzles1/</link>
      <pubDate>Sat, 05 Oct 2019 00:00:00 +0100</pubDate>
      
      <guid>//ianhocking.com/prog/posts/javapuzzles1/</guid>
      <description>I&amp;rsquo;m not that far into my Java journey, but I&amp;rsquo;ve come across this interesting Java puzzle, set by one of my MSc instructors. I&amp;rsquo;m setting it down here to help me remember it. The puzzle isn&amp;rsquo;t unique to our course, and I&amp;rsquo;ve seen it discussed elsewhere (not that I searched until I&amp;rsquo;d given it a thorough working over privately, first!).
Essentially, we are asked: &amp;ldquo;Is the method below to determine whether a number is odd correct?</description>
    </item>
    
    <item>
      <title>Some .httaccess Settings to Separate my Blogs</title>
      <link>//ianhocking.com/prog/posts/where-do-people-go/</link>
      <pubDate>Fri, 20 Sep 2019 21:18:29 +0100</pubDate>
      
      <guid>//ianhocking.com/prog/posts/where-do-people-go/</guid>
      <description>Until recently, if a visitor went to https://ianhocking.com, they&amp;rsquo;d be redirected to my WordPress blog of several years called This Writing Life. I now want to move this to one side this so I can give prominence to my new programmer blog. However, I&amp;rsquo;d been having trouble keeping the two blogs separate.
If a person went to https://ianhocking.com, they&amp;rsquo;d see my programmer blog. But if they requested a page that did not exist, they&amp;rsquo;d always get directed to my writing blog.</description>
    </item>
    
    <item>
      <title>Login</title>
      <link>//ianhocking.com/prog/meta/login/</link>
      <pubDate>Sat, 14 Sep 2019 00:00:00 +0100</pubDate>
      
      <guid>//ianhocking.com/prog/meta/login/</guid>
      <description>This Writing Life</description>
    </item>
    
    <item>
      <title>Meta</title>
      <link>//ianhocking.com/prog/pages/meta/</link>
      <pubDate>Sat, 14 Sep 2019 00:00:00 +0100</pubDate>
      
      <guid>//ianhocking.com/prog/pages/meta/</guid>
      <description>Login: This Writing Life</description>
    </item>
    
    <item>
      <title>Using Git Hooks to Automate Blog Publishing</title>
      <link>//ianhocking.com/prog/posts/githooks/</link>
      <pubDate>Tue, 10 Sep 2019 00:00:00 +0100</pubDate>
      
      <guid>//ianhocking.com/prog/posts/githooks/</guid>
      <description>Background This blog is produced from a plaintext Org mode file that is passed to an org module called ox-hugo. Essentially, ox-hugo looks at the org file and produces Markdown files, which are then processed by a static website generation framework called Hugo. It goes without saying that these are all fantastic, free tools.
My Prior Workflow Originally, when ready to publish the blog, I would save the org file1&amp;ndash;this would trigger an export process2 that produced the Markdown files.</description>
    </item>
    
    <item>
      <title>Permanently Set File-Local Variables in Doom Emacs</title>
      <link>//ianhocking.com/prog/posts/local_variables_doom/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0100</pubDate>
      
      <guid>//ianhocking.com/prog/posts/local_variables_doom/</guid>
      <description>From time to time, it&amp;rsquo;s useful to set local variables within an org file. For instance, I have a file whose subsections I&amp;rsquo;d like to encrypt. This being the case, I need to turn off autosave (since this could save plain text). To do this for the buffer, I add this to the top:
# -*- buffer-auto-save-file-name: nil; -*- Emacs is understandably wary of running elisp simply because it exists in the file, however.</description>
    </item>
    
    <item>
      <title>Hello world</title>
      <link>//ianhocking.com/prog/posts/hello/</link>
      <pubDate>Sun, 01 Sep 2019 00:00:00 +0100</pubDate>
      
      <guid>//ianhocking.com/prog/posts/hello/</guid>
      <description>Hello! Please consider this blog to be in maintenance mode.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>//ianhocking.com/prog/pages/about/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0100</pubDate>
      
      <guid>//ianhocking.com/prog/pages/about/</guid>
      <description>Hi, I&amp;rsquo;m Ian.
I live in Canterbury with my wife and several gerbils.
Following a successful career in academic psychology researching psycholinguistics and creativity1, I&amp;rsquo;m now enjoying opportunities and challenges in my first love, software development. I enrolled on the University of Kent&amp;rsquo;s MSc in Computer Science2 in September 2019 and graduated in 2021with distinction. I&amp;rsquo;m currently working as a software developer at Literature and Latte.
Check out my CV/PhD.</description>
    </item>
    
    <item>
      <title>Style Guide</title>
      <link>//ianhocking.com/prog/hidden/style/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0100</pubDate>
      
      <guid>//ianhocking.com/prog/hidden/style/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s read about how to write posts in Ox-Hugo&amp;ndash;after the jump. (This will
probably only work in the RSS.)&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>