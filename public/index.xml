<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dr Ian Hocking</title>
    <link>//ianhocking.com/blog/</link>
    <description>Recent content on Dr Ian Hocking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 10 Sep 2019 11:01:48 +0100</lastBuildDate>
    
	<atom:link href="//ianhocking.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fix .httaccess!</title>
      <link>//ianhocking.com/blog/posts/fix-dot-httaccess/</link>
      <pubDate>Tue, 10 Sep 2019 11:01:48 +0100</pubDate>
      
      <guid>//ianhocking.com/blog/posts/fix-dot-httaccess/</guid>
      <description>So this hasn&amp;rsquo;t quite worked yet! It looks as though it was working as I wanted it, but then I needed to include the WordPress settings back and that seems have created a problem. Maybe move my new rule to the end of the file.
Also, fix the image, which is no longer appearing on the web version of my &amp;lsquo;how to write on this blog&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Using Git Hooks</title>
      <link>//ianhocking.com/blog/posts/githooks/</link>
      <pubDate>Tue, 10 Sep 2019 00:00:00 +0100</pubDate>
      
      <guid>//ianhocking.com/blog/posts/githooks/</guid>
      <description>Background This blog is produced from a plaintext Org mode file that is passed to an org module called ox-hugo. Essentially, ox-hugo looks at the org file and produces Markdown, which is then processed by a static website generation framework called Hugo.
My Original Workflow When ready to publish, I would save the org file1&amp;ndash;this would trigger an export process that produced the Markdown files. This would result in a Hugo-friendly set of files that Hugo could then chew through to produce a complete static website.</description>
    </item>
    
    <item>
      <title>Permanently Set File-Local Variables in Doom Emacs</title>
      <link>//ianhocking.com/blog/posts/local_variables_doom/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0100</pubDate>
      
      <guid>//ianhocking.com/blog/posts/local_variables_doom/</guid>
      <description>From time to time, it&amp;rsquo;s useful to set local variables within an org file. For instance, I have a file whose subsections I&amp;rsquo;d like to encrypt. This being the case, I need to turn off autosave (since this could save plain text). To do this for the buffer, I add this to the top:
# -*- buffer-auto-save-file-name: nil; -*- Emacs is understandably wary of running elisp simply because it exists in the file, however.</description>
    </item>
    
    <item>
      <title>Hello world</title>
      <link>//ianhocking.com/blog/posts/hello/</link>
      <pubDate>Sun, 01 Sep 2019 00:00:00 +0100</pubDate>
      
      <guid>//ianhocking.com/blog/posts/hello/</guid>
      <description>Hello! Please consider this blog to be in maintenance mode.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>//ianhocking.com/blog/pages/about/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0100</pubDate>
      
      <guid>//ianhocking.com/blog/pages/about/</guid>
      <description>Hi, I&amp;rsquo;m Ian.</description>
    </item>
    
    <item>
      <title>How to Write Posts</title>
      <link>//ianhocking.com/blog/hidden/writingorgtohugo/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0100</pubDate>
      
      <guid>//ianhocking.com/blog/hidden/writingorgtohugo/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s read about how to write posts in Ox-Hugo&amp;ndash;after the jump. (This will
probably only work in the RSS.)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Style Guide</title>
      <link>//ianhocking.com/blog/hidden/style/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0100</pubDate>
      
      <guid>//ianhocking.com/blog/hidden/style/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s read about how to write posts in Ox-Hugo&amp;ndash;after the jump. (This will
probably only work in the RSS.)&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>